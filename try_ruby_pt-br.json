{"1":{"lang":"PT-BR","title":"Tem 30 minutos? Dê uma chance ao Ruby agora!","chapter":"Y","answer":"","ok":"","error":"","text":"<p>Ruby é uma linguagem de programação criada no Japão que está revolucionando\no desenvolvimento de software.</p>\n\n<p>A beleza do Ruby é encontrada em seu equilibrio entre simplicidade e poder.</p>\n\n<p>Você pode digitar algum código Ruby no editor e usar estes botões para navegar:</p>\n\n<ul>\n<li><strong>Run</strong> &rarr; Executa o código que está no editor</li>\n<li><strong>Copy</strong> &rarr; Copia o código de exemplo para o editor</li>\n<li><strong>Next</strong> &rarr; Vai para a próxima lição</li>\n<li><strong>Back</strong> &rarr; Retorna a lição anterior</li>\n<li><strong>Clear</strong> &rarr; Limpa o editor</li>\n</ul>\n\n<p>Use o botão &lsquo;mundo&rsquo; <span aria-hidden=\"true\" class=\"glyphicon glyphicon-globe\"></span>\nacima para mudar o idioma do TryRuby.</p>\n\n<h3>Clique em <strong>Next</strong> para iniciar o aprendizado.</h3>\n","load_code":""},
"2":{"lang":"PT-BR","title":"Usando o editor","chapter":"N","answer":"^\\d{1,}$","ok":"Ótimo! Você fez um pouco de matemática. Viu como a resposta apareceu?","error":"Digite 2 + 6 no editor","text":"<p>A janela de edição na parte inferior é onde você digita o seu código Ruby, clique no botão <strong>Run</strong>\ne veja o seu código rodar!</p>\n\n<p>Por exemplo, tente digitar alguma expressão matemática. Como:</p>\n\n<pre><code>2 + 6\n</code></pre>\n\n<p>A saída do seu programa será exibida na janela de saída na parte superior.\nTambém deverá ter uma linha que lhe dirá o quão bem você fez.</p>\n\n<blockquote>\n<p>Alternativamente, você pode apertar o botão <strong>Copy</strong> para copiar todo o exemplo para o editor.</p>\n</blockquote>\n","load_code":""},
"3":{"lang":"PT-BR","title":"Numeros e Matemática","chapter":"N","answer":"^[0-9\\.,-]{1,}$","ok":"Bom","error":"","text":"<p>O Ruby reconhece números e símbolos matemáticos. Você pode tentar outras expressões matemáticas, como:</p>\n\n<pre><code>4 * 10\n5 - 12\n30 / 4\n</code></pre>\n","load_code":""},
"4":{"lang":"PT-BR","title":"Colocando de forma diferente","chapter":"N","answer":"^[0-9\\.,-]{1,}$","ok":"Bem colocado","error":"","text":"<p>Você percebeu que se você digitou mais de uma fórmula, você só viu o resultado da última?\nO que está acontecendo?</p>\n\n<blockquote>\n<p>Para tornar este site mais fácil de usar, eu disse ao Ruby para copiar o resultado do seu programa\npara a tela de saída ao topo. Então quando você digita uma fórmula, você consegue ver o resultado.\n<strong>Mas apenas o último resultado.</strong> E apenas se a saída estiver vazia.</p>\n</blockquote>\n\n<p>Então, quando você entrou com 2 ou mais fórmulas, o Ruby exibiu apenas o resultado da última fórmula.</p>\n\n<p>É claro, você tem o poder de controlar a tela! Apenas digite <strong>puts</strong> antes de cada fórmula\n(com um espaço entre eles). Puts significa: <em>&lsquo;coloque (put) alguma coisa na tela&rsquo;</em>.</p>\n\n<p>Tente isso:</p>\n\n<pre><code>puts 4 * 10\nputs 5 - 12\nputs 30 / 4\n</code></pre>\n\n<p>Agora, remova o <strong>puts</strong> da última fórmula e veja o que acontece.</p>\n","load_code":""},
"5":{"lang":"PT-BR","title":"Diga o seu nome","chapter":"N","answer":"[a-zA-Z]{1,1}","ok":"Perfeito, você formou uma string com as letras do seu nome","error":"","text":"<p>Claro, computadores são práticos e rápidos para operações matemáticas. Vamos continuar. Gostaria de ver o seu nome invertido?</p>\n\n<p>Primeiro digite o seu nome, entre aspas, desta forma:</p>\n\n<pre><code>&quot;Ricardo&quot;\n</code></pre>\n","load_code":""},
"6":{"lang":"PT-BR","title":"Diga o seu nome de trás para frente","chapter":"N","answer":"\\w+","ok":"moB","error":"","text":"<p>Uma string é um conjunto de caracteres que o computador consegue processar. Imagine que as\nletras estão em um varal de roupas, e as aspas são os pregadores segurando as extremidades.\nAs aspas marcam o ínicio e o fim da string.</p>\n\n<p>Para inverter o seu nome, digite:</p>\n\n<pre><code>&quot;Ricardo&quot;.reverse\n</code></pre>\n\n<p>(Não se esqueca do ponto!)</p>\n","load_code":""},
"7":{"lang":"PT-BR","title":"Contando Letras","chapter":"N","answer":"^\\d+$","ok":"Sim. Length também é um 'método'","error":"","text":"<p>Você já usou o <strong>método</strong> reverse no seu nome! Ao colocar seu nome entre aspas, você criou uma string. Então você chamou o método reverse, que\nfunciona com strings e inverte a posição de todas as letras, deixando a string de trás para frente.</p>\n\n<p>Agora, vejamos quantas letras tem em seu nome:</p>\n\n<pre><code>&quot;Ricardo&quot;.length\n</code></pre>\n","load_code":""},
"8":{"lang":"PT-BR","title":"Na repetição","chapter":"N","answer":"(\\w+)","ok":"É um prazer conhece-lo.É um prazer conhece-lo.É um prazer conhece-lo.","error":"","text":"<p>Agora, você provavelmente está se perguntando qual é a utilidade disto.</p>\n\n<p>Bem, eu tenho certeza que você já visitou alguma página que gritou: <strong>&ldquo;Ei, sua senha é muito curta!&rdquo;</strong></p>\n\n<p>Viu? Alguns programas usam este simples  código <strong>.length</strong>.</p>\n\n<p>Veja isso. Vamos múltiplicar seu nome por 5.</p>\n\n<pre><code>&quot;Ricardo&quot; * 5\n</code></pre>\n","load_code":""},
"9":{"lang":"PT-BR","title":"Ei, Sumário #1 Pronto","chapter":"Y","answer":"NoMethodError|undefined","ok":"Não, não é possível inverter um número. Clique em __next__ para continuar","error":"","text":"<p>Vamos revisar o que nós aprendemos neste primeiro minuto.</p>\n\n<h3>O editor</h3>\n\n<p>Digitando o código no editor e clicando em <strong>run</strong>, o resultado do seu código é exibido na tela de saída.\n(Quase) todos os códigos fornecem uma resposta.</p>\n\n<h3>Numeros e strings</h3>\n\n<p>Números e strings são os objetos matemáticos e de texto do Ruby.</p>\n\n<h3>Métodos</h3>\n\n<p>Você usou métodos em inglês como reverse e length. E usou métodos simbólicos como o método\nde multiplicação: *.\n<strong>Métodos significam ações!</strong></p>\n\n<p>Esta é a essência do seu aprendizado. Pegando coisas simples, brincando com elas e então tornando-as\ncoisas novas.\nJá se sente confortável? Tenho certeza que você está.</p>\n\n<h2>Ok,</h2>\n\n<p>vamos fazer algo desconfortável. Tente inverter um número:</p>\n\n<pre><code>40.reverse\n</code></pre>\n","load_code":""},
"10":{"lang":"PT-BR","title":"Pare, Você Está Latindo Como Um Louco!","chapter":"N","answer":"^\\d{1,}$","ok":"Apenas strings podem ser invertidas","error":"","text":"<p>Você não pode inverter o número 40. Eu acho que você pode segurar o seu monitor em frente a um espelho, mas inverter um número\n simplesmente não faz sentido.</p>\n\n<p>O Ruby lançou uma mensagem de erro. O Ruby está te dizendo que não há o método reverse para números.</p>\n\n<p>Talvez, se você tornar o número em uma string primeiro:</p>\n\n<pre><code>40.to_s.reverse\n</code></pre>\n","load_code":""},
"11":{"lang":"PT-BR","title":"Garotos São Diferentes de Garotas","chapter":"N","answer":"\\[\\]","ok":"Ótimo, esta é uma lista vazia","error":"","text":"<p>E números são diferentes de strings.</p>\n\n<p>Enquanto você pode usar métodos com qualquer objeto em Ruby, alguns métodos só funcionam com certos tipos de coisas.\nMas você pode sempre converter diferentes tipos em Ruby usando os métodos &ldquo;to&rdquo;.</p>\n\n<ul>\n<li><strong>to_s</strong> converte coisas para <strong>s</strong>trings</li>\n<li><strong>to_i</strong> converte coisas para <strong>i</strong>ntegers (números)</li>\n<li><strong>to_a</strong> converte coisas para <strong>a</strong>rrays</li>\n</ul>\n\n<p><strong>O que são arrays?!</strong></p>\n\n<p>Eles são listas. Digite um par de colchetes:</p>\n\n<pre><code>[]\n</code></pre>\n","load_code":""},
"12":{"lang":"PT-BR","title":"Ficando na Fila","chapter":"N","answer":"^\\[([-\\.\\d]+)(\\s*,\\s*[-\\d\\.]+){3,}\\]$","ok":"Excelente","error":"Tente incluir um quarto número na lista","text":"<p>Listas (arrays) guardam coisas <strong>em alguma ordem</strong>.</p>\n\n<p>É como ficar na fila para a pipoca. Você está atrás de alguém e você nem sonharia passar a frente dele,\ncerto? E o cara atrás de você, você está de olho nele, certo?</p>\n\n<p>Aqui está uma lista para você. Números de loteria.</p>\n\n<pre><code>[12, 47, 35]\n</code></pre>\n\n<p>Tente adicionar um número a esta lista: digite uma virgula após o 35, então digite um número. O espaço é opcional.</p>\n","load_code":""},
"13":{"lang":"PT-BR","title":"Um Levanta a Mão","chapter":"N","answer":"^47$","ok":"Ok","error":"","text":"<p>Uma lista dos números da loteria. Qual é o maior?</p>\n\n<p>Tente: </p>\n\n<pre><code>[12, 47, 35].max\n</code></pre>\n","load_code":""},
"14":{"lang":"PT-BR","title":"Colocando Uma Lista de Distância","chapter":"N","answer":"^\\[(\\d+)(,\\s*\\d+){2,}\\]$","ok":"Salvo!","error":"","text":"<p>Bom, bom. Mas é irritante ter que ficar digitando a lista toda vez que você precisar dela, não é?</p>\n\n<p>Vamos salvar os seus números dentro de um bilhete, assim:</p>\n\n<pre><code>bilhete = [12, 47, 35]\n</code></pre>\n","load_code":""},
"15":{"lang":"PT-BR","title":"Agora Digite bilhete","chapter":"N","answer":"\\[(\\d+(, )?){2,}\\]","ok":"Restaurado!","error":"","text":"<p>Agora, digite:</p>\n\n<pre><code>bilhete\n</code></pre>\n","load_code":"bilhete = [12, 47, 35]"},
"16":{"lang":"PT-BR","title":"Salvo, Escondido","chapter":"N","answer":"\\[12, 35, 47\\]","ok":"Você ordenou a lista","error":"","text":"<p>Você escreveu seus números de loteria, guardou-os dentro de uma <strong>variável</strong> chamada bilhete.\nMas qualquer outro nome, como <em>listadoricardo</em>, teria funcionado também.</p>\n\n<p>Programar, você descobrirá, é em boa parte trabalhar com variáveis.</p>\n\n<p>Vamos ordenar os números da loteria, o que acha?</p>\n\n<p>Use:</p>\n\n<pre><code>bilhete.sort!\n</code></pre>\n\n<p>Você tem uma lista. Você ordenou uma lista. A variável bilhete agora mudou.\nVocê notou que o método <em>sort!</em> tem uma grande e brilhante exclamação no final?\nMuitas vezes, os métodos do Ruby poderão ser chamados desta forma se eles alterarem a variável para o bem.\nIsso não é nada especial, apenas uma indicação.</p>\n","load_code":"bilhete = [12, 47, 35]"},
"17":{"lang":"PT-BR","title":"Elemento","chapter":"N","answer":"^(12|35|47)$","ok":"Ok","error":"Quase","text":"<p>Então, nós guardamos os nossos números da loteria dentro de uma variável bilhete. Como fazemos para\ncolocá-los pra fora de novo?</p>\n\n<p>Nós já vimos que nós podemos obter o maior número com o método <strong>max</strong>. De forma similar, você pode obter\no primeiro, <strong>first</strong>, ou o último, <strong>last</strong>, elemento da lista.\nMas e se você quiser um elemento específico?</p>\n\n<h3>[ ]</h3>\n\n<p>Ruby usa colchetes [ ] para obter um elemento alvo.\nOs colchetes são muito comuns em Ruby.\nEles são como miras usadas para alinhar ao alvo. Exatamente.\nEsses colchetes significam: &ldquo;Eu estou olhando pelo ____&rdquo;. Pronto, mire.</p>\n\n<p>Vamos pegar todos os nossos números da loteria:</p>\n\n<pre><code>puts bilhete[0]\nputs bilhete[1]\nputs bilhete[2]\n</code></pre>\n\n<p>Por que nós usamos [0], [1], [2] ?</p>\n\n<p>E não [1], [2] e [3] ? Isso é algum tipo de coisa zen japonesa ?\nNão, nós, pessoas-computador, apenas gostamos de contar começando do zero. Isso não é algo apenas do Ruby,\neste <em>índice com base zero</em> é usado na maioria das linguagens de programação.</p>\n\n<blockquote>\n<p>Um pequeno lembrete: você pode usar o botão <strong>Copy</strong> para copiar o exemplo para o editor.</p>\n</blockquote>\n","load_code":"bilhete = [12, 47, 35]"},
"18":{"lang":"PT-BR","title":"Sumário #2 Está Sobre Nós","chapter":"Y","answer":"\\w+","ok":"Isto rima ?","error":"","text":"<p>Agora, vejamos como nosso segundo minuto foi:</p>\n\n<h3>Erros</h3>\n\n<p>Se você tentar inverter um número, o Ruby irá lhe dizer um erro.</p>\n\n<h3>Arrays</h3>\n\n<p>Arrays são listas para guardar coisas em alguma ordem.\nNós também aprendemos como criar arrays e recuperar itens de arrays.</p>\n\n<h3>Variáveis</h3>\n\n<p>Variáveis salvam a coisa e dão um nome pra ela. Você usou o símbolo de igual para isso. Por exemplo:\nbilhete = [14, 37, 18].</p>\n\n<h3>2/8</h3>\n\n<p>Ao todo, há oito seções. Você está a dois oitavos do caminho para fora daqui! Isto é algo simples,\nvocê não acha? Coisas boas a frente.</p>\n\n<p>Vamos mudar as direções por um momento. Eu coloquei um pedaço de um poema em uma certa variável.\nDê uma olhada. Digite:</p>\n\n<pre><code>puts poema\n</code></pre>\n","load_code":"poema = \"Minha torrada voou da minha mão\\nE minha torrada se foi para a lua.\\nMas quando eu vejo isso na televisão,\\nColocando nossa bandeira no cometa Halley,\\nMais ainda eu quero come-la.\\n\""},
"19":{"lang":"PT-BR","title":"Infelizmente, Você Odeia Poemas de Torradas","chapter":"N","answer":"(torrada){0}","ok":"Excelente","error":"Continua cheirando a torrada para mim","text":"<p>Olha, tudo bem. Você não tem que gostar disso. Hackeie isso, seja meu convidado. Ao invés de torrada,\nvá para melão ou algo do tipo. Tente isso para ver o novo poema:</p>\n\n<pre><code>poema.gsub(&quot;torrada&quot;, &quot;manga&quot;)\n</code></pre>\n\n<p>O método <strong>gsub</strong> é abreviação para substituição global. Ele substitui todas as ocorrências de &ldquo;torrada&rdquo; para\n&ldquo;manga&rdquo;</p>\n","load_code":"prev"},
"20":{"lang":"PT-BR","title":"Pronto, Mire","chapter":"N","answer":"^\\n.al-emoc (.+)","ok":"Ok, claro.  Então todo o poema foi invertido.","error":"","text":"<p>Eis a questão: o que acontece quando nós invertemos todo o poema?</p>\n\n<pre><code>poema.reverse\n</code></pre>\n","load_code":"prev"},
"21":{"lang":"PT-BR","title":"Muita inversão","chapter":"N","answer":"^\\[\"Mais ainda (.+)","ok":"Sim, quase o que queremos","error":"","text":"<p>Então, todo o poema foi invertido, letra por letra. Eu realmente desejo inverter apenas as linhas.\nFazer com que a última linha seja a primeira, e a primeira seja a última.</p>\n\n<p>De trás para frente, mas não <strong>este</strong> de trás pra frente.</p>\n\n<p>Veja como:</p>\n\n<pre><code>poema.lines.reverse\n</code></pre>\n","load_code":"prev"},
"22":{"lang":"PT-BR","title":"Cachos de Métodos Encadeados","chapter":"N","answer":"^Mais ainda eu quero (.+)","ok":"Bem mostrado, meu amigo!<br/>O método join pega este array de linhas e junta todas elas em uma string.","error":"","text":"<p>Então, o que você vê? O que aconteceu aqui? Você digitou <strong>poema.lines.reverse</strong> e o que aconteceu?</p>\n\n<p>Duas coisas aconteceram. Você tornou o poema em uma lista usando o método <strong>lines</strong>.\n<strong>Lines</strong> decide a forma como a string será dividida e converte isso em um array.</p>\n\n<p>Então, você inverteu esta lista. Você tinha cada linha. Você inverteu elas. É isso.</p>\n\n<p>Vamos colocar mais um método ao final aqui:</p>\n\n<pre><code>puts poema.lines.reverse.join\n</code></pre>\n\n<p>Combinando métodos desta forma é chamado de <em>encadeamento de métodos</em>.</p>\n","load_code":"prev"},
"23":{"lang":"PT-BR","title":"De todos os sumários #3 está aqui agora","chapter":"Y","answer":"\\{\\}","ok":"Você criou um hash vazio !","error":"","text":"<h3>Exclamações</h3>\n\n<p>Métodos podem ter exclamações (e também interrogações) em seus nomes.\nIsto são apenas formas de explicar melhor qual é sua função. Nada de mais.</p>\n\n<h3>Manipulação de string</h3>\n\n<p>Buscar e alterar strings</p>\n\n<h3>Encadeamento</h3>\n\n<p>Encadeamento de métodos permite que você faça muito mais. Quebrar um poema, inverte-lo, remonta-lo:\n<strong>poema.lines.reverse.join</strong></p>\n\n<p>A esta altura, talvez você queira  brincar com o poema um pouco mais. A lista completa de todos os métodos\nde String está <a href=\"http://ruby-doc.org/core/classes/String.html\" target=\"_blank\">aqui</a></p>\n\n<p>Vá em frente e tente um pouco, coisas como: poema.downcase ou poema.swapcase</p>\n\n<h2>Pronto ?</h2>\n\n<p>Quando se sentir pronto para continuar, digite:</p>\n\n<pre><code>livros = {}\n</code></pre>\n","load_code":"prev"},
"24":{"lang":"PT-BR","title":"Um Pequenino Livro em Branco","chapter":"N","answer":"^(esplendido|muito_bom|mediocre|nao_tao_bom|lixo)$","ok":"Sim, este precisa de uma análise","error":"Use um dentre esplendido, muito_bom, mediocre, nao_tao_bom, lixo.<br/>Não esqueça os dois pontos.","text":"<p>Você criou um <strong>hash</strong> vazio. Um hash é como um array, porém cada um dos seus elementos tem um nome.</p>\n\n<p>Nós iremos adicionar algumas análises de livrinhos ao nosso hash. Aqui está nosso sistema de classificação:</p>\n\n<ul>\n<li>:esplendido &rarr; uma obra prima</li>\n<li>:muito_bom &rarr; gostei, é, gostei</li>\n<li>:mediocre &rarr; tem partes boas e ruins</li>\n<li>:nao_tao_bom &rarr; notavelmente ruim</li>\n<li>:lixo &rarr; jamais recomendaria a alguém</li>\n</ul>\n\n<p>Para classificar um livro, coloque o título entre colchetes e escreva a classificação após o sinal de igual. Por exemplo:</p>\n\n<pre><code>livros[&quot;O Arco-Íris da Gravidade&quot;] = :esplendido\n</code></pre>\n\n<blockquote>\n<p>Agora, acho que é justo lhe dizer que todas as lições do TryRuby são separadas uma das outras.\nEntão, se você sair escrevendo loucamente análises de livros aqui, você só poderá usa-las nessa lição.\nSe você deseja usar as suas análises na próxima lição, você deve copia-las e cola-las.\nNão se preocupe com isso, cada lição tem uma quantidade pré definida de coisas para você brincar.</p>\n</blockquote>\n","load_code":"livros = {}"},
"25":{"lang":"PT-BR","title":"Mais Pequenos Pedaços de Análises","chapter":"N","answer":"[3-9]","ok":"Veja, o método length trabalha com strings, arrays e hashes","error":"","text":"<p>Vá em frente, preencha a lista com análises. E, se você quiser ver toda a lista, apenas digite: <strong>puts livros</strong></p>\n\n<p>De novo, as classificações são: :esplendido, :muito_bom, :mediocre, :nao_tao_bom e :lixo</p>\n\n<p>Essas classificações não são strings. Quando você coloca dois pontos a frente de uma simples palavra, você obtém um <strong>symbol</strong> (símbolo).\nSímbolos são mais baratos que strings (em termos de custo de memória). Se você usar uma palavra várias e várias vezes no seu programa,\ntroque por um símbolo. Ao invés de ter milhares de cópias desta palavra na memória, o computador irá armazenar o símbolo apenas <strong>uma vez</strong>.</p>\n\n<p>Mais importante, um símbolo diz a você que isso não é apenas uma palavra, mas algo que tem significado para o seu programa.</p>\n\n<p>Entre com mais duas análises de livros, use <strong>livros.length</strong> para ver quantas análises já existem no hash:</p>\n\n<pre><code>livros[&quot;Até o Fim&quot;]  = :lixo\nlivros[&quot;Cores Vivas&quot;] = :mediocre\n\nputs livros\n\nputs livros.length\n</code></pre>\n","load_code":"livros = {\"O Arco-Íris da Gravidade\" => :esplendido}"},
"26":{"lang":"PT-BR","title":"Espera, Eu Gostei De Gravity's Rainbow?","chapter":"N","answer":"^(esplendido|muito_bom|mediocre|nao_tao_bom|lixo)$","ok":"Eu gostei bastante","error":"","text":"<p>Uma grande coisa sobre o Ruby é que nomes são frequentemente reutilizados, isso significa menos nomes para você lembrar.</p>\n\n<p>Relembre como nós recuperamos itens de um array utilizando um número:\n<strong>puts bilhete[1]</strong>.</p>\n\n<p>Para um hash isso funciona da mesma forma, exceto que nós não usaremos um número para recuperar um elemento (mas sim um nome).</p>\n\n<p>Então, se você quiser olhar uma de suas análises antigas, de novo, coloque o título entre colchetes (mas dessa vez sem o sinal de igual).\nDesta forma:</p>\n\n<pre><code>puts livros[&quot;O Arco-Íris da Gravidade&quot;]\n</code></pre>\n","load_code":"livros = {\"O Arco-Íris da Gravidade\" => :esplendido, \"Até o Fim\" => :lixo, \"Cores Vivas\" => :mediocre}"},
"27":{"lang":"PT-BR","title":"Hashes como pares","chapter":"N","answer":"^\\[\".*\"\\]","ok":"Você encontrou as chaves","error":"","text":"<p>Tenha em mente que hashes não mantém as coisas ordenadas. Este não é o trabalho dele. Ele apenas\nfaz pares, os pares são: uma <strong>key</strong> (chave) e um <strong>value</strong> (valor).</p>\n\n<p>Em suas análises, o título do livro é a <strong>key</strong>, e a classificação é o <strong>value</strong>.</p>\n\n<p>Se você desejar ver apenas os titulos de todos os livros que você já análisou:</p>\n\n<pre><code>livros.keys\n</code></pre>\n\n<p>Você também pode tentar isso com .values ao invés de .keys.</p>\n","load_code":"prev"},
"28":{"lang":"PT-BR","title":"Você é Áspero (Harsh)?","chapter":"N","answer":"\"mediocre\"","ok":"Ótimo, wow! Você fez um scorecard das suas análises.","error":"","text":"<p>Então, você está dando análises ásperas e injustas? Vamos dar uma pontuação com um novo hash <strong>classificacoes</strong>:</p>\n\n<p>Ok, vamos contar nossas análises. Apenas fique comigo. Digite:</p>\n\n<pre><code>classificacoes = Hash.new {0}\n\nlivros.values.each { |classificacao|\n  classificacoes[classificacao] += 1\n}\n\nputs classificacoes\n</code></pre>\n\n<p>A novidade em nosso código é o caracter pipe, provavelmente localizado a direita da tecla Shift\nno seu teclado.</p>\n\n<p>A linha <em>+= 1</em> significa: some 1 ao valor.</p>\n\n<p>Não se preocupe se você não entender tudo o que está acontecendo aqui. Isto será revelado mais tarde.</p>\n","load_code":"livros = {\"O Arco-Íris da Gravidade\" => :esplendido, \"Até o Fim\" => :lixo, \"Cores Vivas\" => :mediocre, \"Bumblebees\" => :mediocre}"},
"29":{"lang":"PT-BR","title":"Um Cálculo","chapter":"N","answer":"\\w+","ok":"Yodelay!","error":"","text":"<p>Uma das coisas incríveis que nós acabamos de usar é o <strong>bloco</strong>. Nós vamos explorar mais isso\nnesta e na próxima lição. Mas, basicamente, um bloco é um pedaço de código Ruby cercado por chaves {}.</p>\n\n<p>Vamos tentar outro bloco:</p>\n\n<pre><code>5.times { print &quot;Odelay! &quot; }\n</code></pre>\n\n<p>Blocos são sempre associados a métodos. Como o método <strong>times</strong>, que pega o bloco e roda o código\ndele várias e várias vezes. (No nosso exemplo: cinco vezes).</p>\n","load_code":""},
"30":{"lang":"PT-BR","title":"Você Pegou o Tempo?","chapter":"N","answer":"^[0-9]$","ok":"Seu tempo está correto!","error":"Rode o bloco de 0 a 9 vezes.","text":"<p>Como nós vimos em nosso primeiro exemplo com um bloco (quando contamos classificações) nós podemos passar um valor para o bloco.\nQuais valores são <strong>passados</strong> é determinado pelo método que está rodando o bloco.</p>\n\n<p>Os valores que são <strong>recebidos</strong> pelo bloco são colocados em uma variável que tem o nome definido no ínicio do bloco,\nentre dois símbolos pipe: |</p>\n\n<p>Vamos tentar isso com este bloco:</p>\n\n<pre><code>5.times { |vez|\n  puts vez\n}\n</code></pre>\n\n<p>Aqui, o método <strong>.times (significa vezes)</strong> envia o valor para a variável <strong>|vez|</strong> . Porém, note que a variável vez só é conhecida dentro do bloco.</p>\n\n<blockquote>\n<p>Você notou que você pode dividir o código em várias linhas? Isto torna o código um pouco mais fácil de ser lido.</p>\n</blockquote>\n","load_code":""},
"31":{"lang":"PT-BR","title":"Agora Desembarcando no Sumário #4","chapter":"Y","answer":"","ok":"","error":"","text":"<p>Esta última lição é um pouco mais longa. Você provavelmente usou três minutos aprendendo sobre:</p>\n\n<h3>Hashes</h3>\n\n<p>O pequeno dicionário com páginas chaves: <strong>{}</strong></p>\n\n<h3>Símbolos</h3>\n\n<p>Pequenos, eficientes palavras de código com dois pontos, como: <strong>:esplendido</strong></p>\n\n<h3>Blocos</h3>\n\n<p>Trechos de código que podem ser usados com muitos métodos do Ruby. Aqui o código usado para\nconstruir o scorecard:\n<strong>livros.values.each { |classificacao| classificacoes[classificacao] += 1 }</strong></p>\n\n<h3>Próximo</h3>\n\n<p>Na próxima lição nós iremos entrar um pouco mais a fundo nos métodos.</p>\n","load_code":""},
"32":{"lang":"PT-BR","title":"(Ser) ou não (ser)","chapter":"N","answer":"","ok":"","error":"","text":"<p>Outra pequena coisa que nós não falamos de forma realmente aberta: argumentos de métodos.\nLembra quando nós mudamos o poema um pouco? Nós usamos:\n<strong>poema.gsub(&ldquo;torrada&rdquo;, &ldquo;manga&rdquo;)</strong></p>\n\n<p>O método gsub precisa de dois argumentos, que nós passamos para o gsub ao incluir duas strings\nentre parênteses. <em>Argumentos falam para o método exatamente o que fazer</em></p>\n\n<h3>Parênteses</h3>\n\n<p>Atualmente, na maior parte das vezes o Ruby não se importa se você omitir os parenteses. Então, Isto\nteria funcionado também:\n<strong>poema.gsub &ldquo;torrada&rdquo;, &ldquo;manga&rdquo;</strong></p>\n\n<p>Nós já usamos outro método com parâmetro (ou argumento). Muitas vezes, de fato, isso não foi tão óbvio:</p>\n\n<pre><code>puts &quot;Olá!&quot;\nputs(&quot;Olá!&quot;)\n</code></pre>\n\n<p>Sim, <strong>puts</strong> também é um método. Usar puts com ou sem parênteses é a mesma coisa para o Ruby, mas a versão\nsem parênteses é um pouco mais fácil de ler. E isso economiza seu valioso tempo digitando !</p>\n\n<blockquote>\n<p>Então eu acho que a conclusão é que você pode fazer o que você quiser com parênteses desde que\na legibilidade do seu código seja boa.</p>\n</blockquote>\n\n<h3>(ser) ou não (ser)</h3>\n\n<p>Então, se <em>to</em> (ser) é o nome de um método e <em>ser</em> é um argumento, nós sabemos a resposta para esta questão milenar.\nÉ realmente apenas uma questão de preferência de <em>to be</em> ou <em>to(be)</em>.</p>\n\n<p>Você está no humor para mais Shakespeare? Leia.</p>\n","load_code":"poema = \"Minha torrada voou das minhas mãos\\nE minha torrada foi para a lua.\\nYada yada yada\\n\""},
"33":{"lang":"PT-BR","title":"A Megera Domada","chapter":"N","answer":"^domar","ok":"Bom bom !","error":"","text":"<p>Agora você já sabe como usar o Ruby. Quero dizer, você já viu o essencial.\nVocê só tem que continuar aprendendo mais métodos e tentar blocos mais complexos.</p>\n\n<p>Mas tem um lado do Ruby que nós não mostramos. Escrever seus próprios métodos.\n<strong>Aha!</strong> Vamos fazer isso então.</p>\n\n<p>Além de utilizar métodos que já vem com o Ruby (como puts, sort, times), você pode definir\nseus próprios métodos. Por que isso é uma boa idéia? Dois motivos:</p>\n\n<h3>Para fazer o seu programa ficar menor</h3>\n\n<p>Se você tem que fazer a mesma coisa em mais de uma parte do seu código, é mais fácil\ncolocar este código em um método separado. Seu código será menor</p>\n\n<h3>Para tornar o seu código mais fácil de ler</h3>\n\n<p>Suponha que o seu programa precise fazer um monte de coisas diferentes.\nVocê <strong>poderia</strong> colocar tudo em um pedaço longo de código. Mas isso tornaria díficil\nde ler e entender o seu código depois.</p>\n\n<p>Ao invés disso, você deve dividir seu código em diferentes métodos e dar a cada métodos\num nome de fácil entendimento. Você irá agradecer a si mesmo depois.</p>\n\n<p>Então, como definimos um método? Assim:</p>\n\n<pre><code>def domar( numero_de_megeras )\nend\n</code></pre>\n","load_code":""},
"34":{"lang":"PT-BR","title":"Em Ruby, Def Leppard significa: defina o método Leppard","chapter":"N","answer":"^domar","ok":"Manso não é coxo","error":"","text":"<p>Ei, ok, você fez isso. Você está criando seu próprio método. Você iniciou com def, seguido do nome do método.\nE a lista de argumentos que este método precisará. Isso não é tão assustador e perigoso!\nTudo o que temos que fazer é preenche-lo com Ruby e finaliza-lo com a palavra <strong>end</strong>.</p>\n\n<p>Aqui está o código:</p>\n\n<pre><code>def domar( numero_de_megeras )\n  numero_de_megeras.times {\n    puts &quot;Megera domada&quot;\n  }\nend\n</code></pre>\n\n<blockquote>\n<p><strong>P.S.</strong><br>\nSe você não pegou o titulo deste capítulo.\n<a href=\"http://en.wikipedia.org/wiki/Def_Leppard\" target=\"_blank\">Def Leppard</a>\né o nome de uma, famosa, banda inglesa de rock.</p>\n</blockquote>\n","load_code":""},
"35":{"lang":"PT-BR","title":"O Amadurecido Fruto de Sua Própria Criação","chapter":"N","answer":"^Megera domada","ok":"Isso vai mostrar essas megeras","error":"","text":"<p>Um novo método nasceu. Vamos usa-lo agora:</p>\n\n<pre><code>domar 5\n</code></pre>\n","load_code":"def domar(numero_de_megeras);numero_de_megeras.times{puts \"Megera domada\"};end;"},
"36":{"lang":"PT-BR","title":"Dar e Tomar","chapter":"N","answer":"\\d+","ok":"Certo. Bravo.","error":"","text":"<p>Muitos métodos não só precisam de alguns parâmetros de entrada, mas também irão <strong>devolver algo</strong>.\nEu mudei o nosso método um pouco, assim ele irá retornar um valor para você. Tente isso:</p>\n\n<pre><code>def domar( numero_de_megeras )\n  numero_de_megeras.times {\n    puts &quot;Megera domada&quot;\n  }\n  return numero_de_megeras\nend\n\nputs domar(3)\n</code></pre>\n\n<h3>Retorno (Return)</h3>\n\n<p>E, uma vez que você está ficando avançado e capaz aqui, mais uma dica:\nvocê pode omitir a palavra <strong>return</strong> da última linha do método.\nO Ruby irá automagicamente retornar o valor da última variável usada dentro do método.</p>\n\n<p>Assim, nós podemos mudar a última linha para apenas <strong>numero_de_megeras</strong>.</p>\n\n<p>Mas, uma vez que o método <strong>.times</strong> também retorna o <em>numero_de_megeras</em> nós podemos\nremover a última linha inteira. De fato, nosso método original já fazia o que nós queríamos!</p>\n","load_code":""},
"37":{"lang":"PT-BR","title":"Olá, Quem Está Ai? E Sumário #5 Segura o Chapéu!","chapter":"Y","answer":"","ok":"","error":"","text":"<p>Muito bem, muito bem, muito bem, muito bem!</p>\n\n<p>Verdadeiramente, verdadeiramente, verdadeiramente, verdadeiramente, verdadeirameeeeeente!</p>\n\n<p>Aqui estão os últimos minutos da nosa vida revisados:</p>\n\n<h3>Métodos</h3>\n\n<p>Métodos podem ser definidos com <strong>def</strong> e têm um nome. Métodos tornam os seus programas mais curtos\ne fáceis de ler.</p>\n\n<h3>Parâmetros</h3>\n\n<p>Métodos podem receber parâmetros.</p>\n\n<h3>Retornar valores</h3>\n\n<p>Métodos (quase) sempre retornam valores.</p>\n\n<h2>Agora</h2>\n\n<p>(Ser) ou não (ser) não é mais uma dúvida para você. Você está pronto para um pouco mais de Shakespare?</p>\n","load_code":""},
"38":{"lang":"PT-BR","title":"O mundo é nossa ostra","chapter":"N","answer":"^\\{\\\"William","ok":"Bom. Um pouco díficil de ler.","error":"","text":"<p>Até agora, rodamos apenas programas que utilizam apenas coisas digitadas por nós mesmos.\nO que é bom, quero dizer que <em>OdeLaying</em> foi épico. Mas a era da internet é sobre um tempo\nem que nos esforçamos para incluir o resto do mundo em nossos programas.</p>\n\n<p>Muitos, muitos, muitos sites estão disponíveis para você solicitar informação. Por exemplo, este link\nirá lhe fornecer todo o atual <a href=\"http://news.google.com/news/section?q=ruby&output=rss\" target=\"_blank\">Google news feeds</a>\nsobre Ruby.</p>\n\n<p>Seu browser provavelmente irá exibi-lo corretamente para você. Se você olhar o código fonte\n(digite: control-U), você verá uma string longa de um texto estranhamente formatado. No exemplo do Google,\neste texto está no formato <strong>rss</strong></p>\n\n<h3>Formatos</h3>\n\n<p>Existem muitos outros formatos, com nomes estranhos, disponíveis e utilizados na web. Como:\nhtml, xml e json. Sim, mesmo este website tem um monte desses.</p>\n\n<p>Eu preparei um método para você que lhe permitirá buscar, da internet, uma lista com os trabalhos concluídos de\nWilliam Shakespeare.\n(Não se preocupe, isto vem do mesmo webserver que este site roda, então não estamos incomodando ninguém).</p>\n\n<p>Pegue os dados com:</p>\n\n<pre><code>get_shakey\n</code></pre>\n","load_code":"def get_shakey;JSON.parse(\"{\\\"William Shakespeare\\\": {\\\"1\\\": {\\\"title\\\": \\\"The Two Gentlemen of Verona\\\", \\\"finished\\\": 1591},\\\"2\\\": {\\\"title\\\": \\\"The Taming of the Shrew\\\", \\\"finished\\\": 1591},\\\"3\\\": {\\\"title\\\": \\\"Henry VI, Part 2\\\", \\\"finished\\\": 1591},\\\"4\\\": {\\\"title\\\": \\\"Henry VI, Part 3\\\", \\\"finished\\\": 1591},\\\"5\\\": {\\\"title\\\": \\\"Henry VI, Part 1\\\", \\\"finished\\\": 1592},\\\"6\\\": {\\\"title\\\": \\\"Titus Andronicus\\\", \\\"finished\\\": 1592},\\\"7\\\": {\\\"title\\\": \\\"Richard III\\\", \\\"finished\\\": 1593},\\\"8\\\": {\\\"title\\\": \\\"Edward III\\\", \\\"finished\\\": 1593},\\\"9\\\": {\\\"title\\\": \\\"The Comedy of Errors\\\", \\\"finished\\\": 1594},\\\"10\\\": {\\\"title\\\": \\\"Love's Labour's Lost\\\", \\\"finished\\\": 1595},\\\"11\\\": {\\\"title\\\": \\\"Love's Labour's Won\\\", \\\"finished\\\": 1596},\\\"12\\\": {\\\"title\\\": \\\"Richard II\\\", \\\"finished\\\": 1595},\\\"13\\\": {\\\"title\\\": \\\"Romeo and Juliet\\\", \\\"finished\\\": 1595},\\\"14\\\": {\\\"title\\\": \\\"A Midsummer Night's Dream\\\", \\\"finished\\\": 1595},\\\"15\\\": {\\\"title\\\": \\\"King John\\\", \\\"finished\\\": 1596},\\\"16\\\": {\\\"title\\\": \\\"The Merchant of Venice\\\", \\\"finished\\\": 1597},\\\"17\\\": {\\\"title\\\": \\\"Henry IV, Part 1\\\", \\\"finished\\\": 1597},\\\"18\\\": {\\\"title\\\": \\\"The Merry Wives of Windsor\\\", \\\"finished\\\": 1597},\\\"19\\\": {\\\"title\\\": \\\"Henry IV, Part 2\\\", \\\"finished\\\": 1598},\\\"20\\\": {\\\"title\\\": \\\"Much Ado About Nothing\\\", \\\"finished\\\": 1599},\\\"21\\\": {\\\"title\\\": \\\"Henry V\\\", \\\"finished\\\": 1599},\\\"22\\\": {\\\"title\\\": \\\"Julius Caesar\\\", \\\"finished\\\": 1599},\\\"23\\\": {\\\"title\\\": \\\"As You Like It\\\", \\\"finished\\\": 1600},\\\"24\\\": {\\\"title\\\": \\\"Hamlet\\\", \\\"finished\\\": 1601},\\\"25\\\": {\\\"title\\\": \\\"Twelfth Night\\\", \\\"finished\\\": 1601},\\\"26\\\": {\\\"title\\\": \\\"Troilus and Cressida\\\", \\\"finished\\\": 1602},\\\"27\\\": {\\\"title\\\": \\\"Sir Thomas More\\\", \\\"finished\\\": 1604},\\\"28\\\": {\\\"title\\\": \\\"Measure for Measure\\\", \\\"finished\\\": 1604},\\\"29\\\": {\\\"title\\\": \\\"Othello\\\", \\\"finished\\\": 1604},\\\"30\\\": {\\\"title\\\": \\\"All's Well That Ends Well\\\", \\\"finished\\\": 1605},\\\"31\\\": {\\\"title\\\": \\\"King Lear\\\", \\\"finished\\\": 1606},\\\"32\\\": {\\\"title\\\": \\\"Timon of Athens\\\", \\\"finished\\\": 1606},\\\"33\\\": {\\\"title\\\": \\\"Macbeth\\\", \\\"finished\\\": 1606},\\\"34\\\": {\\\"title\\\": \\\"Antony and Cleopatra\\\", \\\"finished\\\": 1606},\\\"35\\\": {\\\"title\\\": \\\"Pericles, Prince of Tyre\\\", \\\"finished\\\": 1608},\\\"36\\\": {\\\"title\\\": \\\"Coriolanus\\\", \\\"finished\\\": 1608},\\\"37\\\": {\\\"title\\\": \\\"The Winter's Tale\\\", \\\"finished\\\": 1611},\\\"38\\\": {\\\"title\\\": \\\"Cymbeline\\\", \\\"finished\\\": 1610},\\\"39\\\": {\\\"title\\\": \\\"The Tempest\\\", \\\"finished\\\": 1611},\\\"40\\\": {\\\"title\\\": \\\"Cardenio\\\", \\\"finished\\\": 1613},\\\"41\\\": {\\\"title\\\": \\\"Henry VIII\\\", \\\"finished\\\": 1613},\\\"42\\\": {\\\"title\\\": \\\"The Two Noble Kinsmen\\\", \\\"finished\\\": 1614}}}\");end;"},
"39":{"lang":"PT-BR","title":"Noble Kinsmen","chapter":"N","answer":"^The Two Noble Kinsmen$","ok":"Assim é bem melhor","error":"","text":"<p>Ok, agora nós temos a lista de peças obtidas da internet. A lista está em formato json.\nFelizmente, para nós, o Ruby, gentilmente, fornece um método para converter json em Hash.\nO método <em>get_shakey</em> já faz isso para nós</p>\n\n<p>Mas, uma vez que a estrutura do json é convertida em um hash, ela se torna um pouco difícil de ler.\nVamos então escrever um método para exibir as peças de forma legível.</p>\n\n<p>Se você olhar a lista de peças cuidadosamente, você verá que há um tipo de estrutura identada.\nAtualmente, isso é comum em dados que você obtém da internet. Parece como isso:</p>\n\n<ul>\n  <li>&ldquo;William Shakespeare&rdquo;\n  <ul>\n      <li>&ldquo;1&rdquo;\n      <ul>\n        <li>&ldquo;title&rdquo;: &ldquo;The Two Gentlemen of Verona&rdquo;</li>\n        <li>&ldquo;finished&rdquo;: 1591</li>\n      </ul>\n      </li>\n      <li>&ldquo;2&rdquo;\n      <ul>\n        <li>&ldquo;title&rdquo;: &ldquo;The Taming of the Shrew&rdquo;</li>\n        <li>&ldquo;finished&rdquo;: 1591</li>\n      </ul>\n      </li>\n      <li>&hellip;</li>\n  </ul>\n  </li>\n</ul>\n\n<p>Para listar as peças, primeiro nós temos que acessar o elemento do topo do hash, &ldquo;William Shakespeare&rdquo;, pelo seu nome.\nEm seguida, temos que <strong>iterar</strong> através de cada elemento abaixo deste.</p>\n\n<p>O Ruby tem um método para iterar. Ele é chamado de <strong>each</strong> (significa cada). Nós já o vimos antes\nquando criamos nosso sistema de avaliação de livros.</p>\n\n<p>Tudo que o método <strong>each</strong> retorna é passado para o bloco:</p>\n\n<pre><code>s = get_shakey\n\ns[&quot;William Shakespeare&quot;].each { |key, val|\n  puts val[&quot;title&quot;]\n}\n</code></pre>\n","load_code":"prev"},
"40":{"lang":"PT-BR","title":"Tudo junto agora","chapter":"N","answer":"^4$","ok":"Sim, Shakespeare escreveu 4 peças em 1591","error":"A resposta para o ano 1591 deve ser 4","text":"<p>Agora, suponha que nós desejamos saber apenas os nomes e a quantidade de peças escritas\npor Shakespeare em um determinado ano.</p>\n\n<p>O Ruby nos permite selecionar (<strong>select</strong>) valores do hash. O método <strong>select</strong> usa um bloco\npara nos deixar definir o que selecionar, e retorna o que for encontrado.</p>\n\n<p>Nós podemos usar o resultado retornado pelo método <strong>select</strong> no método <strong>each</strong> simplesmente\nadicionando-o após o bloco do <strong>select</strong>. Este é outro exemplo de encadeamento de métodos, que nós\nvimos antes ao inverter o poema.</p>\n\n<p>Eu preparei o método <strong>count_plays</strong> (plays significa peças) para você. Veja se você consegue descobrir\nquantas peças foram escritas por Shakespeare no ano <strong>1591</strong>. Tente isso:</p>\n\n<pre><code>def count_plays(year)\n  s = get_shakey\n\n  s[&quot;William Shakespeare&quot;]\n    .select { |k, v|\n      v[&quot;finished&quot;] == year\n    }.each { |key, val|\n      puts val[&quot;title&quot;]\n    }.count\nend\n\nputs count_plays(0)\n</code></pre>\n\n<p>Você notou que eu encadeei o método <strong>count</strong> ao final do método <strong>each</strong>? Isto nos dá o valor\nde retorno para o método <strong>count_plays</strong>.</p>\n\n<p>Existe uma outra possibilidade de encadeamento aqui. Veja esta linha <strong>s = get_shakey</strong>.\nVocê pode adicionar o <strong>[&ldquo;William Shakespeare&rdquo;].select { |k, v|</strong> ao final do <strong>get_shakey</strong>\n(nesse caso, não é preciso colocar o ponto).</p>\n","load_code":"prev"},
"41":{"lang":"PT-BR","title":"Tudo Fica Bem Quando Termina Bem","chapter":"N","answer":"All's Well That Ends Well","ok":"True","error":"Use 1605 como segundo parâmetro","text":"<p>Ok, nós pegamos alguns dados da internet, nós selecionamos o que nós queríamos e imprimimos na tela.\nO que falta melhorar? Nós poderíamos ter impresso os resultados de forma um pouco mais bonita. Como adicionar\no ano e alinhar títulos e anos.</p>\n\n<p>Isso significa imprimir vários valores em uma linha. O Ruby possui um jeito puro\nde fazer isso. É exatamente como imprimir uma string: <strong>puts &ldquo;Olá, meu nome é Ricardo&rdquo;</strong>.\nMas, ao invés de utilizarmos o valor literal <em>Ricardo</em>, nós usaremos o valor da variável.</p>\n\n<p>Em primeiro lugar, substitua <strong>Ricardo</strong> por <strong>#{}</strong>. Se o Ruby ver o símbolo hash # seguido de chaves {\nele procurará por uma variável entre a abertura e o fechamento da chave }.\nNós podemos usa-lo desta forma: <strong>&ldquo;Olá, meu nome é #{nome}&rdquo;</strong>  </p>\n\n<p>Vamos alterar um pouco o nosso código</p>\n\n<pre><code>def print_plays(year_from, year_to)\n  get_shakey[&quot;William Shakespeare&quot;]\n    .select { |k, v|\n      year_from &lt;= v[&quot;finished&quot;] &amp;&amp;\n      year_to   &gt;= v[&quot;finished&quot;]\n    }.each { |k, v|\n      puts &quot;#{v[&quot;title&quot;].ljust(30)} #{v[&quot;finished&quot;]}&quot;\n    }\nend\nprint_plays(1600, 1605)\n</code></pre>\n\n<p>Eu adicionei <strong>.ljust(30)</strong> ao título. Desta forma o título é <em>justificado a esquerda</em> com um minímo de\n30 caracteres (assim os anos ficam alinhados).</p>\n\n<p>Veja se você pode mudar a saída do programa para que ele exiba as peças desta forma: <strong>1600 -&gt; As You Like It</strong></p>\n\n<p><strong>Tudo Fica Bem Quando Termina Bem ?</strong> Ei, nós não terminamos ainda, mas o fim está a vista !</p>\n","load_code":"prev"},
"42":{"lang":"PT-BR","title":"Se eu pelo menos soubesse como tomar uma decisão","chapter":"N","answer":"","ok":"","error":"","text":"<p>Tomar uma decisão, na vida real isso pode ser um problema. Não para nós.\nO Ruby faz a tomada de decisões ser muito fácil.</p>\n\n<pre><code>if 1 &lt; 2\n  puts &quot;É verdade: 1 é menor que 2&quot;\nend\n</code></pre>\n\n<p>A palavra chave aqui é <strong>if</strong> (se). O <strong>if</strong> pode ser posicionado antes de um método ou depois de um método, por exemplo:</p>\n\n<pre><code>puts &quot;É verdade que: 1 é menor que 2? &quot; if 1 &lt; 2\n</code></pre>\n\n<p><strong>If</strong> é um método que requer um parâmetro. Este parâmetro pode ser qualquer expressão que você queira\ntestar. A saída da expressão, no entanto, deve ser <strong>true</strong> (verdadeiro) ou <strong>false</strong> (falso).\nAqui estão um monte de expressões e suas saídas:</p>\n\n<pre><code>5     &lt;= 10     # =&gt; true\n&#39;abc&#39; == &#39;def&#39;  # =&gt; false\ntrue            # =&gt; true\n123456          # =&gt; true\n0               # =&gt; true\nnil             # =&gt; false\n&#39;xyz&#39;.empty?    # =&gt; false\n&#39;a&#39; &gt; 5         # =&gt; error:\n                # comparison of String with\n                # Numeric failed\n</code></pre>\n\n<p>A <em>expressão if</em> pode tomar muitas formas. Ela pode comparar valores literais (1 &lt; 2),\nvariáveis (a &lt; 1) e o retorno de um método (&lsquo;xyz&rsquo;.empty?).</p>\n","load_code":""},
"43":{"lang":"PT-BR","title":"E agora para a conclusão surpreendente","chapter":"N","answer":"não é igual a 100$","ok":"Isso é melhor","error":"Isso não pode estar certo","text":"<p>Você viu os dois sinais de igual em <strong>&lsquo;abc&rsquo; == &lsquo;def&rsquo;</strong> ?</p>\n\n<p>Este <strong>==</strong> significa <strong>é igual a</strong>.\nUm único sinal de igual que nós vimos antes significa <strong>atribua o valor a variável</strong>.</p>\n\n<p>Para tornar isto um pouco mais confuso, você pode usar a atribuição após um método if, por exemplo:</p>\n\n<pre><code>a = 0\n\nif a = 100\n  puts &quot;A expressão é verdadeira, mas agora a é: #{a}&quot;\nelse\n  puts &quot;#{a} não é igual a 100&quot;\nend\n</code></pre>\n\n<p>Troque o = por == e veja o que acontece.</p>\n\n<p>Eu posso garantir que você irá esquecer de digitar o segundo sinal de igual regularmente. Eu também\nesqueço dele as vezes.</p>\n\n<h3>else</h3>\n\n<p>No código acima eu adicionei o else a expressão. Esta parte será executada quando a\n<strong>expressão teste do if</strong> retornar false.</p>\n\n<blockquote>\n<p>Existem mais variações para este tema if-then-else. Você pode ler mais\n<a href=\"http://www.ruby-doc.org/core/doc/syntax/control_expressions_rdoc.html\" target=\"_blank\">aqui</a>.</p>\n</blockquote>\n","load_code":""},
"44":{"lang":"PT-BR","title":"Mim fome","chapter":"N","answer":"^Mim sem fome","ok":"Sim","error":"De jeito nenhum eu estou com fome as 10 da manhã !","text":"<p>Ok,\nOkay, isso, enfim, está ficando maravilhoso. Isto é uma coisa simples para você, mas tenha em mente que você\nnão sabia <strong>nada de Ruby</strong> a apenas 15 minutos atrás.</p>\n\n<p>Último passo,\nLast step. Vamos colocar tudo isso junto, sabe? Vamos colocar tudo isso para brilhar junto\ncomo reluzentes sinos na praia brilhando sob a luz do sol.</p>\n\n<p>Nós vamos definir dois métodos primeiro, e então tomaremos uma decisão:</p>\n\n<pre><code>def fome?(hora_do_dia)\n  puts &quot;Mim fome&quot;\n  true\nend\n\ndef comer_um(o_que)\n  puts &quot;Mim comer #{o_que}\\n&quot;\nend\n\ncomer_um &#39;maçã&#39; if fome?(14)\n\ncomer_um &#39;maçã&#39; if fome?(10)\n</code></pre>\n\n<p>Agora, veja se você consegue alterar o método <strong>fome?</strong> para exibir <strong>&ldquo;Mim sem fome&rdquo;</strong> e retornar falso\nquando a hora for menor que 12.</p>\n","load_code":""},
"45":{"lang":"PT-BR","title":"Sumário #6 Que Significa Que Você Foi Bem Longe","chapter":"Y","answer":"\\{\\}","ok":"Ok, é um Hash vazio","error":"","text":"<p>Você é um clérigo Ruby level 6. Quero dizer, que grande trabalho você fez. Vamos revisar:</p>\n\n<h3>Dados</h3>\n\n<p>Você carregou alguns dados da internet,</p>\n\n<h3>Iterando</h3>\n\n<p>Você iterou todos os elementos de um hash e você encadeou alguns outros métodos.</p>\n\n<h3>Imprimindo Bonito</h3>\n\n<p>E como se isso não fosse o bastante, você formatou e imprimiu alguns valores de uma forma\nque é fácil para humanos ler. De fato, <strong>você fez um programa real!</strong></p>\n\n<h3>IF</h3>\n\n<p>Você aprendeu a tomar o controle dos seus programas com declarações de <strong>if</strong> e <strong>else</strong>.</p>\n\n<h2>Então</h2>\n\n<p>O que é possível fazer em seguida? O que é possível que você ainda tenha que aprender agora?\nHa! Esta é a melhor parte. Você percorreu um caminho tão grande que agora vamos revelar as classes.\nApenas mais duas lições curtas, e acabou.</p>\n\n<p>Mais cedo, nós criamos um Hash desta forma:</p>\n\n<pre><code>Hash.new\n</code></pre>\n","load_code":""},
"46":{"lang":"PT-BR","title":"Não Uma Classe de Escola, uma Classe Trabalhadora","chapter":"N","answer":"","ok":"","error":"","text":"<p>Veja, as chaves vazias são um atalho para Hash.new. O método new é usado para criar objetos de uma determinada classe.\nPense em &ldquo;classe&rdquo; como &ldquo;classe trabalhadora&rdquo;, um grupo específico de objetos que são similares,\ntem o mesmo trabalho, e usam as mesmas roupas.\nO que uso é uma classe ?</p>\n\n<h3>Blurbalizer<sup>TM</sup></h3>\n\n<p>Você acabou de ter uma brilhante idéia para um novo aplicativo. Ele será <strong>a</strong> nova plataforma\nde mensagens instantâneas. Você quer um aplicativo onde as pessoas possam enviar curtas mensagens para as outras.\nVocê chama isso de Blurbs<sup>TM</sup>. Os Blurbs<sup>TM</sup> permite o tamanho máximo de apenas 40 caracteres.\nVamos fazer algumas configurações de humor também.</p>\n\n<h3>Onde começar</h3>\n\n<p>Bem, você deve armazenar seus Blurbs<sup>TM</sup> em um arquivo json, certo?\nMas como você poderia manter o rastreamento do conteúdo e da hora em que foi postado?\nE quando o arquivo foi carregado, como isso ficaria no Ruby?\nIsto deveria ser um Hash? Ou um Array? Ou um Array de Arrays? Ou algo diferente?</p>\n\n<h3>Class</h3>\n\n<p>Eu realmente acho que você vai querer usar uma classe. Você já está familiarizado com várias classes:\nHash, Array, String.\nVamos criar uma nova classe (não tem retorno):</p>\n\n<pre><code>class Blurb\nend\n</code></pre>\n","load_code":""},
"47":{"lang":"PT-BR","title":"As Coisas Das Quais Os Apps São Feitos","chapter":"N","answer":"","ok":"","error":"","text":"<p>Você abriu a nova Blurb<sup>TM</sup> class. Do que a entrada do seu blog é feita?\nDe conteúdo, claro. Também, a hora em que o Blurb<sup>TM</sup> foi postado. E o humor.</p>\n\n<p>Ok, então você tem a primeira linha da sua classe, aqui está o resto:</p>\n\n<pre><code>class Blurb\n  attr_accessor :conteudo, :hora, :humor\nend\n</code></pre>\n\n<p>Nomes de classes sempre começam com letra maiúscula.</p>\n\n<p>(Continua sem saída na tela)</p>\n","load_code":""},
"48":{"lang":"PT-BR","title":"Acessores São Os Membros Pendurados","chapter":"N","answer":"Blurb:","ok":"Meu primeiro Blurb","error":"","text":"<p>Hey, boa classe cara. Você tem uma nova classe Blurb<sup>TM</sup>.</p>\n\n<p>Na definição de classe, você usou o método chamado attr_accessor.\nExistem vários métodos de <strong>attr</strong>ibutos como esse que adicionam pequenas configurações as classes.\nEsses atributos são apenas variáveis amarradas a classe.</p>\n\n<p>Pense desta forma. A classe é uma pessoa. Aquela coisa humana em forma de estrela lá fora.\nE os atributos são os membros pendurados, as diferentes partes que mantém o corpo de pé e\nque permitem que as pessoas apertem as mãos umas das outras.</p>\n\n<h3>Agora</h3>\n\n<p>Para criar um Blurb<sup>TM</sup> e definir seu conteúdo:</p>\n\n<pre><code>blurb1 = Blurb.new\nputs blurb1\nblurb1.conteudo = &quot;Hoje, Mount Hood foi roubado!&quot;\n</code></pre>\n","load_code":"class Blurb;attr_accessor :conteudo,:tempo,:humor;end"},
"49":{"lang":"PT-BR","title":"Um Objeto, Este Pequeno Pacote Puro","chapter":"N","answer":"Blurb:","ok":"Blurb Atualizado","error":"","text":"<p>Vá em frente e defina o tempo e o humor do seu Blurb<sup>TM</sup>:</p>\n\n<pre><code>blurb1.tempo = Time.now\nblurb1.humor = :doente\n\nputs blurb1\n</code></pre>\n","load_code":"prev;blurb1=Blurb.new;blurb1.conteudo=\"Hoje, Mount Hood foi Roubado!\""},
"50":{"lang":"PT-BR","title":"Apressando as Coisas","chapter":"N","answer":"^\\d{4}","ok":"Notável","error":"","text":"<p>Legal, seu app é sensacional. Ei, vamos tornar as coisas um pouco mais fáceis para você.\nVocê não quer definir a hora desta forma toda vez que você postar um Blurb<sup>TM</sup>.</p>\n\n<p>Você quer apenas digitar o conteúdo e definir o humor, certo?</p>\n\n<p>Vamos adicionar um método <strong>initialize</strong> na nossa classe. Este método é chamado sempre que um novo Blurb<sup>TM</sup> é criado.\nAo mesmo tempo, nós queremos limitar o tamanho do conteúdo do BLurb<sup>TM</sup> para apenas 40 caracteres.</p>\n\n<pre><code>class Blurb\n  attr_accessor :conteudo, :tempo, :humor\n\n  def initialize(humor, conteudo=&quot;&quot;)\n    @tempo    = Time.now\n    @conteudo = conteudo[0..39]\n    @humor    = humor\n  end\nend\n\nBlurb.new.tempo\n</code></pre>\n\n<p>(Este parâmetro conteudo=&ldquo;&rdquo;__ está aqui para garantirmos que o conteúdo é uma string,\nmesmo se nenhum conteúdo for passado como parâmetro para o método initialize)</p>\n","load_code":""},
"51":{"lang":"PT-BR","title":"Você Ensinou Seu App a Desprezar Coisas Sem Valor","chapter":"N","answer":"Blurb:","ok":"Blurb adicionado","error":"","text":"<p>Você viu como usamos os simbolos arroba dentro da classe (@tempo)?</p>\n\n<p><strong>Fora</strong> da classe, nós usamos o acessor:</p>\n\n<blockquote>\n<p><strong>blurb.tempo = Time.now</strong></p>\n</blockquote>\n\n<p>mas <strong>dentro</strong> nós usamos <strong>a variável objeto</strong>:</p>\n\n<blockquote>\n<p><strong>@tempo = Time.now</strong></p>\n</blockquote>\n\n<p>Eles são exatamente a mesma coisa, mas são representados em dois locais diferentes do programa.</p>\n\n<h3>Crie outro Blurb<sup>TM</sup></h3>\n\n<p>Quando um novo Blurb<sup>TM</sup> é criado, o método initialize é usado para verificar\npor algum argumento para o new.</p>\n\n<p>Uh, nós precisamos de dois argumentos:</p>\n\n<pre><code>Blurb2 = Blurb.new :confuso, &quot;Eu não posso acreditar que Mt. Hood foi roubado!&quot;\n</code></pre>\n","load_code":"class Blurb;attr_accessor :conteudo,:tempo,:humor;def initialize(humor, conteudo=\"\");@tempo=Time.now;@conteudo=conteudo[0..39];@humor=humor;end;end;blurb1=Blurb.new(:doente,\"Hoje, Mount Hood foi roubado!\")"},
"52":{"lang":"PT-BR","title":"Uma Girafa Não Roubou o Sumário #7","chapter":"Y","answer":"","ok":"","error":"","text":"<p>Aha! Você está aqui. E inteiro. Nós vamos continuar a fazer o seu app real, mas enquanto isso,\nvamos revisar ok?</p>\n\n<h3>Classes</h3>\n\n<p>Tudo em Ruby é algum tipo de objeto. Classes explicam objetos, como um certo tipo de objeto funciona.\nPor exemplo, você criou alguns objetos Blurb<sup>TM</sup> e esses objetos são explicados na classe Blurb.\nEm outras palavras: você os chama de objetos Blurb.\nVocê pode usar classes (meio que) para modelar objetos da vida real</p>\n\n<h3>Acessores</h3>\n\n<p>Acessores são variáveis atreladas a um objeto que podem ser usadas <strong>fora</strong> do objeto.\n(blurb2.tempo = Time.now)</p>\n\n<h3>Variáveis de objeto</h3>\n\n<p>Variáveis de objeto são as mesmas variáveis que você está utilizando com os acessores, porém, <strong>dentro</strong> do objeto.\n(@tempo = Time.now)</p>\n","load_code":"prev;blurb2=Blurb.new :confuso, \"Eu não posso acreditar que Mt. Hood foi roubado!\""},
"53":{"lang":"PT-BR","title":"Seu próprio gramado","chapter":"N","answer":"Blurbalizer:","ok":"Meu app foi criado","error":"","text":"<p>Ok, vamos embrulhar as coisas, garoto. Este é o último capítulo da EMOCIONANTE e épica história do Try Ruby!\nAgora que você já sentiu o gostinho de como tudo funciona, como nós vamos usar isso em volta da casa e no freezer\nda sua mercearia?\nVocê é uma grande pessoa (uma das minhas favoritas), mas você precisa de orientação.</p>\n\n<h3>Vamos finalizar seu app</h3>\n\n<p>Seu app tem entradas, mas não está completo.\nEle ainda precisa de um título, algum lugar para armazenar todos os Blurbs<sup>TM</sup> e uma timeline para funcionar adequadamente.</p>\n\n<p>Tente advinhar, nós vamos usar outra classe. Eu estou lhe dando todo o código da nova classe de uma vez.\nEstude-a <strong>no seu tempo</strong>, sem pressa.\nEu não estou com pressa, eu irei esperar você para a sua próxima lição.</p>\n\n<pre><code>class Blurbalizer\n  def initialize(titulo)\n    @titulo  = titulo\n    @blurbs = [] # Um array fresquinho e limpo\n                 # para armazenar os Blurbs\n  end\n\n  def adicionar_um_blurb(humor, conteudo)\n    # O &lt;&lt; significa adicionar ao array\n    @blurbs &lt;&lt; Blurb.new(humor, conteudo)\n  end\n\n  def exibir_timeline\n    puts &quot;Blurbify: #{@titulo} tem #{@blurbs.count} Blurbs&quot;\n\n    @blurbs.sort_by { |t|\n      t.tempo\n    }.reverse.each { |t|\n      puts &quot;#{t.conteudo.ljust(40)} #{t.tempo}&quot;\n    }\n  end\nend\n\nmeuApp = Blurbalizer.new &quot;O Grande Blurb&quot;\n</code></pre>\n","load_code":"class Blurb;attr_accessor :conteudo,:tempo,:humor;def initialize(humor, conteudo=\"\");@tempo=Time.now;@conteudo=conteudo[0..39];@humor=humor;end;end"},
"54":{"lang":"PT-BR","title":"Sobre o que Blurb's são?","chapter":"N","answer":"Hoje","ok":"Que venham os blurbs","error":"","text":"<p>Aqui está você. Você percebeu tudo que o código da classe Blurbalizer<sup>TM</sup> faz?</p>\n\n<blockquote>\n<p>Na classe Blurbalizer<sup>TM</sup> existem dois <strong>métodos</strong> (adicionar_um_blurb e exibir_timeline)\nVocê pode usar um método fora da classe, da mesma forma como fizemos com os acessores.</p>\n</blockquote>\n\n<p>Hora de começar a usar o Blurbalizer<sup>TM</sup>. Eu já carreguei alguns Blurbs<sup>TM</sup> para você,\nmas sinta-se a vontade para adicionar os seus próprios.</p>\n\n<p>Nós não estamos mais criando Blurbs<sup>TM</sup> diretamente, ao invés disso nós estamos usando o <strong>método</strong>\nadicionar_um_blurb da classe Blurbalizer<sup>TM</sup>. Desta forma, nós podemos ter certeza que todos os Blurbs<sup>TM</sup>\nsão armazenados no objeto meuApp.</p>\n\n<pre><code>meuApp.adicionar_um_blurb :temperamental, &quot;Adicione um Blurb aqui&quot;\n\nmeuApp.exibir_timeline\n</code></pre>\n","load_code":"prev;class Blurbalizer;attr_reader :titulo;def initialize(titulo);@titulo=titulo;@blurbs=[];end;def adicionar_um_blurb(humor, conteudo);@blurbs << Blurb.new(humor, conteudo);@blurbs.each {|t| t.tempo -= 73};end;def exibir_timeline;puts \"Blurbalizer: #{@titulo} tem #{@blurbs.count} Blurbs\\n\";@blurbs.sort_by { |t| t.tempo}.reverse.each { |t| puts \"#{t.conteudo.ljust(40)} #{t.tempo}\"};end;end;meuApp = Blurbalizer.new \"O Grande Blurb\";meuApp.adicionar_um_blurb :doente,\"Hoje Mount Hood Foi Roubado!\";meuApp.adicionar_um_blurb :confuso,\"Eu não posso acreditar que Mount Hood Foi Roubado!\";meuApp.adicionar_um_blurb :atordoado,\"Estou sem palavras!\";meuApp.adicionar_um_blurb :enlouquecido,\"Ele foi roubado por uma GIRAFA !!\";meuApp.adicionar_um_blurb :triste,\"Eu deixei meu chapéu na montanha!\";meuApp.adicionar_um_blurb :enlouquecido,\"Eu nunca mais voltarei as montanhas.\""},
"55":{"lang":"PT-BR","title":"Isto é tudo sobre combinar","chapter":"N","answer":":-","ok":"Temperamental !","error":"","text":"<p>Algumas coisas maravilhosas podem ser feitas com simples partes de Ruby, especialmente quando você combina\nelas em coisas novas.\nAqui nós temos um app feito de uma classe, que contém outra classe. E, atualmente, Ruby realmente lida direito com\neste tipo de criatura. Isto é chamado de programação orientada a objetos.</p>\n\n<p>Enfim chegamos ao <strong>último exercício de programação</strong> do TryRuby. Se você quiser, você pode adicionar mais\nfuncionalidades ao Blurbalizer<sup>TM</sup>.</p>\n\n<p>Talvez você deseje imprimir o humor como um smiley e exibi-lo no método <strong>exibir_timeline</strong>. Você também pode\nadicionar o método <em>modificar</em> a sua classe Blurb<sup>TM</sup> e então usa-lo dentro do método <strong>exibir_timeline</strong>:</p>\n\n<pre><code>class Blurb\n  attr_accessor :conteudo, :tempo, :humor\n\n  def initialize(humor, conteudo=&quot;&quot;)\n    @tempo    = Time.now\n    @conteudo = conteudo[0..39]\n    @humor    = humor\n  end\n\n  def modificar\n    if    @humor == :triste\n      return &quot;:-(&quot;\n    elsif @mood == :feliz\n      return &quot;:-)&quot;\n    # E outros humores aqui\n    end\n\n    # O humor padrão\n    &quot;:-|&quot;\n  end\nend\n\nclass Blurbalizer\n  def initialize(titulo)\n    @titulo  = titulo\n    @blurbs = []\n  end\n\n  def adicionar_um_blurb(humor, conteudo)\n    @blurbs &lt;&lt; Blurb.new(humor, conteudo)\n  end\n\n  def exibir_timeline\n    puts &quot;Blurbalizer: #{@titulo} tem #{@blurbs.count} Blurbs&quot;\n\n    @blurbs.sort_by { |t|\n      t.tempo\n    }.reverse.each { |t|\n      puts &quot;#{t.conteudo.ljust(40)} #{t.tempo}&quot;\n    }\n  end\nend\n\nmeuApp.exibir_timeline\n</code></pre>\n","load_code":"prev"},
"56":{"lang":"PT-BR","title":"Sumário #8, O Sumário do Ei-Relaxa-Você-Foi-Bem","chapter":"Y","answer":"","ok":"","error":"","text":"<p>Esta última sessão é um momento para relaxar, para lhe dar alguma direção sobre como você pode usar o Ruby.</p>\n\n<p>Se você gostou, você pode continuar com o <a href=\"/playground\">TryRuby Playground</a> ou baixar e instalar o Ruby:\n<a href=\"https://www.ruby-lang.org/en/downloads/\" target=\"_blank\">ruby-lang.org</a></p>\n\n<p>Uma vez que você tenha o Ruby instalado, você poderá criar um arquivo, digamos <em>meu_primeiro_programa.rb</em>, usando um editor de texto,\nescrever algum código Ruby e então roda-lo. Para roda-lo abra o prompt de comando e digite:</p>\n\n<pre><code>ruby meu_primeiro_programa.rb\n</code></pre>\n\n<p>Existem várias ferramentas (gratuitas) de desenvolvimento disponíveis para combinar um editor, explorador de arquivos\ne um &lsquo;ruby-runner&rsquo;.</p>\n\n<h2>Comemore</h2>\n\n<p>Você realmente merece comer um bolo de camada dupla, com duplo sorvete, enquanto um cara toca uma daquelas guitarras que na verdade são guitarras duplas.\nQuero dizer, você terminou. Você realmente terminou! Não há duvidas sobre isso, você é um <strong>sangue-vermelho espertão certificado!</strong></p>\n\n<h2>Mais informações</h2>\n\n<p>Existem um monte de ótimos artigos neste site. Eles podem lhe dar um norte sobre para onde ir a partir daqui.</p>\n","load_code":"def ruby(f);puts \"Vá para www.ruby-lang.org para baixar o Ruby\";end;class K;attr_reader :rb;end;meu_primeiro_programa=K.new"}}