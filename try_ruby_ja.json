{"1":{"lang":"JA","title":"30分ありますか? 今すぐRubyを試しましょう!","chapter":"Y","answer":"","ok":"","error":"","text":"Rubyは日本発のプログラミング言語で、ソフトウェア開発に革命をもたらしています。\n\nRubyの美しさはシンプルさと力強さの調和にあります。\n\nエディタ内でRubyのコードを書いて、次のボタンを使って移動できます。\n\n- __Run__ &rarr; エディタ内のコードを実行する\n- __Copy__ &rarr; 例のコードをエディタにコピーする\n- __Next__ &rarr; 次のレッスンに進む\n- __Back__ &rarr; 前のレッスンに戻る\n- __Clear__ &rarr; エディタをクリアする\n\n\n上の'地球'ボタン<span aria-hidden=\"true\" class=\"glyphicon glyphicon-globe\"></span>で\nTryRubyの言語を切り替えられます。\n\n### __Next__ をクリックして学習をはじめましょう","load_code":""},
"2":{"lang":"JA","title":"エディタを使う","chapter":"N","answer":"^\\d{1,}$","ok":"よくできました! 計算が実行されました。出力された結果は見えていますか？","error":"エディタで 2 + 6 と入力してください","text":"下にあるエディタウィンドウにRubyのコードを入力し、 __Run__ を押して実行されるのを見てみましょう!\n\n例として、以下の様な数式を入力してみてください。\n\n    2 + 6\n\nプログラムの出力は、上にある出力ウィンドウに表示されます。\nまた正しくできたかどうかを表示する行もあります。\n\n> あるいは、__Copy__ ボタンを押して例のコードをエディタにコピーすることもできます。","load_code":""},
"3":{"lang":"JA","title":"数と数式","chapter":"N","answer":"^[0-9\\.,-]{1,}$","ok":"よくできました","error":"","text":"Rubyは数と数学記号を理解できます。以下のような数式も入力してみましょう。\n\n    4 * 10\n    5 - 12\n    30 / 4","load_code":""},
"4":{"lang":"JA","title":"異なる出力","chapter":"N","answer":"^[0-9\\.,-]{1,}$","ok":"正しく出力されました","error":"","text":"数式をいくつか入力したのに、答えは最後の1つしか表示されなかったことに気づきましたか?\n何が起こっているのでしょうか?\n\n> このWebサイトを使いやすくするため、プログラムの実行結果を\n> 上の出力用画面にコピーするようにしています。\n> なので、数式を入力すると、その結果が見られます。\n> __しかし、それは最後の結果だけです。__ そして出力が空だったときのみです。\n\n2つ以上の数式を入力しても、Rubyは最後の数式の結果しか返してくれません。\n\nもちろん画面をコントロールすることもできます! それぞれの数式の前に __puts__ と(間に空白を入れて)入力してみましょう。\nputsは *'画面に何かを出力(put)する'*　という意味になります。\n\n\n以下を試してみましょう。\n\n    puts 4 * 10\n    puts 5 - 12\n    puts 30 / 4\n\n最後の数式のputsを削除して何が起こるか確認してみましょう。","load_code":""},
"5":{"lang":"JA","title":"名前を言ってみる","chapter":"N","answer":"[a-zA-Z]{1,1}","ok":"完ぺきです。名前を表す文字から文字列を作り出しました","error":"","text":"いいですね、コンピュータは計算を手軽にすばやく扱います。\n次に移りましょう。逆さまになった名前を見てみたくないですか？\n\nまず、引用符のなかにあなたの苗字を入力してみてください。次のような感じです。\n\n    \"Jimmy\"","load_code":""},
"6":{"lang":"JA","title":"名前を逆さまに言ってみる","chapter":"N","answer":"\\w+","ok":"たしまきでくよ","error":"","text":"コンピュータが処理できる文字の集まりのことを文字列といいます。\n文字を一並びに干された洗濯物、引用符をその端をつまんでいる洗濯ハサミだと思ってください。\n引用符は文字列のはじめとおわりを表します。\n\n名前を逆さまにするには、つぎのように入力します。\n\n    \"Jimmy\".reverse\n\n(カンマを忘れないで！)","load_code":""},
"7":{"lang":"JA","title":"文字数を数える","chapter":"N","answer":"^\\d+$","ok":"そのとおり。lengthも'メソッド'です","error":"","text":"名前を逆さまにする __メソッド__ を使いました！\nまず名前を引用符でくくり、文字列を作りました。\nそして文字列のreverseメソッドを呼び出しました。\nreverseメソッドは文字列のすべての文字を逆さまにひっくりかえす動きをします。\n\nそれでは次に、名前が何文字かを表示させてみましょう。\n\n    \"Jimmy\".length","load_code":""},
"8":{"lang":"JA","title":"繰り返す","chapter":"N","answer":"(\\w+)","ok":"こんにちわ。こんにちわ。こんにちわ。","error":"","text":"文字数が数えられると、どんないいことがあるの？と疑問に思っているかもしれません。\n\nええと、Webサイトで __パスワードが短すぎます！__ と警告されたことがあるでしょう。\n\nそうした場面では、プログラムの中で __.length__ メソッドが使われていることがあります。\n\n次に進みましょう。名前に5を掛けてみてください。\n\n    \"Jimmy\" * 5","load_code":""},
"9":{"lang":"JA","title":"このくらいで要約（その1）にしましょう","chapter":"Y","answer":"NoMethodError|undefined","ok":"いいえ、数を逆さまにはできません。'Next'を押してください","error":"","text":"ここまでの数分で学んだことを確認してみましょう。\n\n### エディタ\nエディタにコードを入力しRunを押すと、出力ウィンドウに結果が出力されます。\nほぼすべてのコードは、結果が表示されます。\n\n### 数値と文字列\n数値と文字列は、Rubyで計算やテキスト処理を行うためのオブジェクトです。\n\n### メソッド\nreverseやlengthといった英語のメソッドを使いました。\nそれと、乗算メソッド(\\*)のような記号のメソッドも使いました。\n__メソッドは振る舞いを意味します！__\n\nここまでやってきたことが学習の本質です。\nシンプルな物事を取り上げていじくり回すと、それらは新しい物事に変わります。\n快適に進められていますか？そうであるよう望みます。\n\n## オーケー\nちょっとだけ不快なことをしてみましょう。数を逆さまにしてみてください。\n\n    40.reverse","load_code":""},
"10":{"lang":"JA","title":"止めて！おかしくなってしまったの？","chapter":"N","answer":"^\\d{1,}$","ok":"逆さまにできるのは文字列だけです","error":"","text":"40という数を逆さまにはできません。\nモニタを鏡に向けて持ち上げることができるかもしれませんが、数字を逆さまにするということは理にかなっていません。\n\nRubyはエラーメッセージを投げます。Rubyは数値を逆さまにするメソッドがないことを伝えています。\n\nあるいは、数値をまず文字列に変換すると良いかもしれません。\n\n    40.to_s.reverse","load_code":""},
"11":{"lang":"JA","title":"男の子とちがう女の子って","chapter":"N","answer":"\\[\\]","ok":"素晴らしい。これは空のリストです。","error":"","text":"数値は文字列と異なります。\n\nRubyでは任意のオブジェクトのメソッドを使用できますが、いくつかのメソッドは特定の種類でだけ動きます。\nけれど、Rubyの\"to\"メソッドを使えば、いつでもデータの種類を変換できます。\n\n- __to_s__ はデータを文字列(__s__tring)に変換します\n- __to_i__ はデータを整数(__i__nteger)に変換します\n- __to_a__ はデータを配列(__a__rray)に変換します\n\n__配列って何？！__\n\n配列とはリストのことです。次のように、角かっこの対を入力してみてください。\n\n    []","load_code":""},
"12":{"lang":"JA","title":"一列に並んで","chapter":"N","answer":"^\\[([-\\.\\d]+)(\\s*,\\s*[-\\d\\.]+){3,}\\]$","ok":"バッチリです","error":"リストの4番目に数値を追加してください","text":"リスト（配列）は__決まった順序で__ものを格納します。\n\nポップコーンを買うために一列に並ぶようなものです。\nあなたは誰かの後ろに並んでいて、前にいる人たちを脇に押しやろうとは夢にも思っていません。ですよね？\nそして、後ろに並んでいる誰かにあなたは目を光らせている。でしょう？\n\n次に示すのは、あなた専用のリストです。抽選番号のリストです。\n\n    [12, 47, 35]\n\nこのリストに数を1つ追加してください。\n35のあとにカンマを入力し、続いて数を入力します。\n空白を入力するかどうかは任意です。","load_code":""},
"13":{"lang":"JA","title":"だれか手を挙げて","chapter":"N","answer":"^47$","ok":"オーケー","error":"","text":"抽選番号のリストがあります。いちばん大きな値はどれでしょう？\n\n以下を試してみてください。\n\n    [12, 47, 35].max","load_code":""},
"14":{"lang":"JA","title":"リストをしまい込む","chapter":"N","answer":"^\\[(\\d+)(,\\s*\\d+){2,}\\]$","ok":"保存しました！","error":"","text":"いい調子です。けれど、必要になるたびにリストを打ち直すのは気が滅入りますよね。\n\nticketにリストを保存しましょう。次のようにします。\n\n    ticket = [12, 47, 35]","load_code":""},
"15":{"lang":"JA","title":"ticketと入力してみる","chapter":"N","answer":"\\[(\\d+(, )?){2,}\\]","ok":"元の状態でした！","error":"","text":"では、入力してみましょう。\n\n    ticket","load_code":"ticket = [12, 47, 35]"},
"16":{"lang":"JA","title":"保存して、しまい込みました","chapter":"N","answer":"\\[12, 35, 47\\]","ok":"リストをソートしました","error":"","text":"抽選番号をメモし、それをticketという名前の__変数__にしまい込みました。\nここで、変数の名前は_jimmyslist_のような別のものでも構いません。\n\nプログラミングとは、これからわかってくることだと思いますが、\nおおむね変数とうまくやるということです。\n\n次に抽選番号を整列させてみましょうか。どうです？\n\nやり方は次の通りです。\n\n    ticket.sort!\n\nリストを整列(sort)しました。変数ticketはもう変わっています。\n_sort!_メソッドのさいごに、大きく目立つ感嘆符があるのに気づきましたか？\nRubyのメソッドは、しばしば変数の中身を変更してしまう時にこのように叫びます。\nですがこれは何てことはない、ただの印です。","load_code":"ticket = [12, 47, 35]"},
"17":{"lang":"JA","title":"要素","chapter":"N","answer":"^(12|35|47)$","ok":"いいですね","error":"惜しい","text":"抽選番号をticketという変数に格納していました。それを再び取り出すにはどうしたらよいでしょう？\n\nもっとも大きな数を__max__を使って取り出す方法はすでに確認しました。\n同じように、__first__や__last__というメソッドを使えば、リストの最初(first)の要素や最後(last)の要素を取り出すことができます。\nけれど、特定の要素を取り出したい場合は？\n\n### [ ]\nRubyは対象の要素を指すのに角かっこ [ ] を使います。\n角かっこはRubyでよく使われます。\n対象を並べるために使われる道しるべのようなものです。\n角かっこは「___を探しています」と対象に照準を合わせることを意味します。\n\nすべての抽選番号を得るには、次のようにします。\n\n    puts ticket[0]\n    puts ticket[1]\n    puts ticket[2]\n\n[0]、[1]、[2]を使ったのはどうしてでしょう？\n\nそして、なぜ[1]、[2]、[3]ではないのでしょう？\n禅か何かの影響？そうではありません。\nわたしたちコンピュータの使い手は、0から数え始めるものなのです。けっしてRubyに限ったことではありません。\nこの__0オリジン__の数え方はほとんどのプログラミング言語で使われています。\n\n> 忘れていませんか: __Copy__ボタンを使えば例のコードをエディタに貼り付けることができます。","load_code":"ticket = [12, 47, 35]"},
"18":{"lang":"JA","title":"要約（その2）がやって来ました","chapter":"Y","answer":"\\w+","ok":"韻を踏んでいますか？","error":"","text":"では、ここまでの数分をどう過ごしたか確認しましょう。\n\n### エラー\n数値や疑わしげなものを逆順にしようとした場合には、Rubyはエラーが起きたことを教えてくれます。\n\n### 配列\n配列とは、決まった順序でものを格納するためのリスト構造です。\n配列の作成の仕方と、配列から要素を取り出す方法を学びました。\n\n### 変数\n変数はものを保存し、それに名前を与えます。変数に何かを格納するには、\nticket = [14, 37, 18] のように等号を使います。\n\n### 2/8\nこのチュートリアルは全部で8つの章から構成されています。\nここまでで全体の８分の２まで進んできました！そんな複雑じゃないでしょう？\nいい調子です。\n\n少し話題を変えましょう。ある変数に、あなたに向けたちょっとしたポエムを詰めておきました。\n次のように入力して、見てみてください。\n\n    puts poem","load_code":"poem = \"My toast has flown from my hand\\nAnd my toast has gone to the moon.\\nBut when I saw it on television,\\nPlanting our flag on Halley's comet,\\nMore still did I want to eat it.\\n\""},
"19":{"lang":"JA","title":"悲しいかな、トーストの詩が大嫌い","chapter":"N","answer":"(toast){0}","ok":"すばらしい","error":"まだトーストの匂いがします","text":"ええ、大丈夫です。無理に好きになる必要はありません。お好きなようにハックしてください。\nトーストの代わりに、メロンや他の何かを使いましょう。\n新しい詩を確認するために、次のコードを試してください。\n\n    poem.gsub(\"toast\", \"honeydew\")\n\n__gsub__メソッドはグローバル置換(global substitute)の略です。\n上記はすべての\"toast\"を\"honeydew\"と置き換えます。","load_code":"prev"},
"20":{"lang":"JA","title":"構えて、狙って","chapter":"N","answer":"^\\n.ti tae ot (.+)","ok":"オーケー。詩全体が逆順に変わりました。","error":"","text":"ここで質問があります。\nこの詩を丸ごと逆順にしたらどうなるでしょうか？\n\n    poem.reverse","load_code":"prev"},
"21":{"lang":"JA","title":"ひっくり返し過ぎました","chapter":"N","answer":"^\\[\"More still did (.+)","ok":"いいですね、だいたい実現できました","error":"","text":"句読点なども含めて、詩全体が逆順となってしまいました。\n本当は行の順序をひっくり返したかったのです。\n最後の行を最初に、最初の行は最後にするということです。\n\n行は逆順にしますが、文自体は逆順に__しません__。\n\nどうやるかを次に示します。\n\n    poem.lines.reverse","load_code":"prev"},
"22":{"lang":"JA","title":"メソッドをつなげる","chapter":"N","answer":"^More still did (.+)","ok":"いい感じですね！joinメソッドは、配列の各要素をつなげて、一つの文字列にしました。","error":"","text":"何が確認できました？いったい何が起こりました？__poem.lines.reverse__と入力すると、何が起きたでしょう？\n\n2つのことが起きました。linesを使って、詩を行ごとのリストにしました。\nlinesは文字列を分解する方法を決定し、配列に変換します。\n\nでは、さらにもう一つメソッドをつなげてみましょう。\n\n    puts poem.lines.reverse.join\n\nこのようにメソッドをつなげていくことを、__メソッド連鎖__といいます。","load_code":"prev"},
"23":{"lang":"JA","title":"ここで、要約（その3）です","chapter":"Y","answer":"\\{\\}","ok":"空のハッシュを作成しました！","error":"","text":"### 感嘆符\nメソッドには、名前に感嘆符（もしくは疑問符）がつくものがあります。\nそれらは、メソッドがどんな動きをするかを説明するためについているもので、どうということはありません。\n \n### 文字列操作\n文字列を検索し、置換しました。\n\n### 連鎖\nメソッド連鎖をすると、より多くのことを一気におこなえます。\n詩を分割し、逆順にし、ふたたび組み立てるために、__poem.lines.reverse.join__としました。\n\nもしかすると、もうちょっと詩をいじくってみたいですか？\nStringのすべてのメソッド一覧は<a href=\"http://ruby-doc.org/core/classes/String.html\" target=\"_blank\">ここ</a>にあります。\n\n見に行ってみて、ちょっとだけ試してみてください。\npoem.downcaseやpoem.swapcaseなどをしてみると面白いかもしれません。\n\n## 準備はいいですか？\n次に行く準備が整ったら、次のように入力してください。\n\n    books = {}","load_code":"prev"},
"24":{"lang":"JA","title":"ちっちゃな空っぽの本","chapter":"N","answer":"^(splendid|quite_good|mediocre|quite_not_good|abysmal)$","ok":"新しい書評です","error":"splendid、quite_good、mediocre、quite_not_good、abysmal<br/>のいずれかを使ってください。また、コロンを忘れないでください","text":"今作成したのは空の__ハッシュ__です。ハッシュは配列みたいなもので、各要素が名前を持つという点が異なります。\n\n新しいハッシュに簡易的な書評をいくつか詰め込んでみることにします。\n評価体系は次のとおりです。\n\n- :splendid &rarr; とてもよい\n- :quite\\_good &rarr; よい\n- :mediocre &rarr; よい部分とひどい部分が半々\n- :quite\\_not\\_good &rarr; よくない\n- :abysmal &rarr; これはひどい\n\n書籍を評価するために、角かっこの中に書名を置き、イコールの後に評価結果を置きます。\n以下に例を示します。\n\n    books[\"Gravitys Rainbow\"] = :splendid\n\n> TryRubyのすべてのレッスンが互いに独立していることについて、そろそろ触れないといけないでしょう。\n> このレッスンでものすごくたくさん書評を入力したとしても、それはこのレッスンでだけしか使えません。\n> もし次のレッスンでも作成した書評を使いたいのなら、書評をコピーしておいて次のレッスンにてペーストしてください。\n> 心配しすぎなくても大丈夫です。レッスンを楽しめるように、各レッスンで必要となるものは、事前にきちんと定義されています。","load_code":"books = {}"},
"25":{"lang":"JA","title":"一口書評をもうちょっと","chapter":"N","answer":"[3-9]","ok":"lengthメソッドは文字列だけでなく、配列やハッシュでも使えます","error":"","text":"つづけて書評を増やしていきましょう。\nすべてのリストを確認するには、__puts books__ と入力します。\n\n繰り返しますが、評価体系は :splendid、:quite\\_good、:mediocre、:quite\\_not\\_good、:abysmal です。\n\nこれらの評価は文字列ではありません。単語の前にコロンをつけると、それは__シンボル__になります。\nシンボルとは、コンピュータメモリの観点で、文字列よりもコストの安いものになります。\nもしプログラムの中で繰り返し繰り返し同じ単語を使いっていたら、シンボルを使うべきです。\nその単語の数千のコピーをメモリ上に持つのではなく、コンピュータは__一度__だけシンボルを格納します。\n\nもっと重要なことは、シンボルにすることは、それが適当な単語ではなく、プログラム中で意味があると示すことができるということです。\n\n書評を2つ以上入力したら、__books.length__を使ってハッシュの中に何この書評があるかを確認してみてください。\n\n    books[\"The deep end\"]  = :abysmal\n    books[\"Living colors\"] = :mediocre\n    \n    puts books\n    \n    puts books.length","load_code":"books = {\"Gravitys Rainbow\" => :splendid}"},
"26":{"lang":"JA","title":"待って。Gravity's Rainbowは好きでしたっけ？","chapter":"N","answer":"^(splendid|quite_good|mediocre|quite_not_good|abysmal)$","ok":"とても好きでした","error":"","text":"Rubyがすばらしい点のひとつに、名前がしばしば再利用されるという点があります。\nこのおかげで、覚えておかないとならない名前は少なくなります。\n\n配列から要素を取り出す際は、__puts ticket[1]__ のように数値を使う必要があったのを覚えてますか？\n\nハッシュでも同様の方法で要素を取り出せます。ただし、数値ではなく名前を使用します。\n\n古い書評を調べたくなったとします。ふたたび角かっこに書名を入力しましょう。けれどイコールから後ろは含めないでください。\n次のようになります。\n\n    puts books[\"Gravitys Rainbow\"]","load_code":"books = {\"Gravitys Rainbow\" => :splendid, \"The deep end\" => :abysmal, \"Living colors\" => :mediocre}"},
"27":{"lang":"JA","title":"ハッシュはペア","chapter":"N","answer":"^\\[\".*\"\\]","ok":"キーを取り出しました","error":"","text":"気をつけないといけないことがあります。ハッシュは順序を保持しません。\nそれはハッシュの責務ではないからです。ハッシュはただ二つのものをペアにします。\n__キー__と__値__です。\n\n書評を詰め込んだハッシュで言うと、書名がキーで評価が値です。\n\nもし評価した書籍の書名だけをすべて確認したいだけなら、次のようにします。\n\n    books.keys\n\n.keysの代わりに.valuesを試すこともできます。","load_code":"prev"},
"28":{"lang":"JA","title":"辛辣な書評をつけてしまった？","chapter":"N","answer":"\"mediocre\"","ok":"やった！すごいです。評価のスコアカードを作成しました","error":"","text":"辛辣か不公平な書評をつけてしまいましたか？\nでは、__ratings__という新しいハッシュを用意してスコアをつけていくようにしましょう。\n\nどうするかというと、そうですね、書評をカウントアップしていくことにします。以下を入力してください。\n\n    ratings = Hash.new {0}\n    \n    books.values.each { |rate|\n      ratings[rate] += 1\n    }\n    \n    puts ratings\n\nコード中の棒線はパイプ文字です。キーボードだと、Enterキーの上あたりにあるはずです。\n\nこのコードの_+= 1_という行は、値を1増やすという意味になります。\n\nここで起きていることをぜんぶ理解できないとしても、心配しないでください。\nあとで明らかにしていきます。","load_code":"books = {\"Gravitys Rainbow\" => :splendid, \"The deep end\" => :abysmal, \"Living colors\" => :mediocre, \"Bumblebees\" => :mediocre}"},
"29":{"lang":"JA","title":"数え上げる","chapter":"N","answer":"\\w+","ok":"Yodelay!","error":"","text":"たったいま使った、驚くべき新しい道具は__ブロック__です。\nここから2つのレッスンでは、ブロックについて詳しく見ていくことにします。\n基本的に、ブロックとは中かっこでくくられたRubyのコード片のことです。\n\nでは、別のブロックも試してみましょう。\n\n    5.times { print \"Odelay! \" }\n\nブロックは常にメソッドに渡されます。\n__times__メソッドのように、ブロックをとり、そのコード片を何回も実行したりします\n（上記の例は5回でした）。","load_code":""},
"30":{"lang":"JA","title":"いまはいくつ？","chapter":"N","answer":"^[0-9]$","ok":"ちょうど良い回数、ブロックを実行しました！","error":"ブロックは0から9までの間で実行させてください","text":"ブロックを使った最初の例（評価をカウントしたプログラムです）で見たように、ブロックには値を渡すことができます。\nどんな値が__渡される__かは、ブロックを実行するメソッドによって決定されます。\n\nブロックが__受け取った__値は、ブロックのはじめ、二つのパイプ文字（|）の間にある変数に置かれます。\n\n次のブロックを使ったコードを試してみてください。\n\n    5.times { |time|\n      puts time\n    }\n\nここでは、__.times__メソッドは変数__|time|__に値を送ります。\ntime変数はブロックの中でしか参照できないということに注意してください。\n\n> ブロックのコードを複数行に分けて書くことができることに気づきましたか？こうすると、ちょっとばかりコードを読みやすくできます。","load_code":""},
"31":{"lang":"JA","title":"要約（その4）にたどり着きました","chapter":"Y","answer":"","ok":"","error":"","text":"最後のレッスンはちょっと長かったかもしれません。\n以下のことを学ぶのに、だいたい3分くらいかかったでしょうか。\n\n### ハッシュ\nねじれたページ__{}__を持つ小さな辞書です。\n\n### シンボル\nとても小さく効率的なコードで、__:splendid__のようにコロン付きの単語で表します。\n\n### ブロック\n多くのRubyのメソッドに付け加えることができるコード片です。\nスコアカードを組み立てるために使ったコードは、次のようなものでした。\n__books.values.each { |rate| ratings[rate] += 1 }__\n\n### 次\n次のレッスンではメソッドの内部についてもう少し深く掘り下げていこうと思います。","load_code":""},
"32":{"lang":"JA","title":"生きるべきか死ぬべきか","chapter":"N","answer":"","ok":"","error":"","text":"これまできちんと話してこなかったちょっとしたことの一つに、メソッド引数があります。\n詩をちょっとばかり書き換えた時のことを覚えていますか？次のようなコードを書きました。\n__poem.gsub(\"toast\", \"honeydew\")__\n    \ngsubメソッドは2つの引数を必要とします。上記では、丸かっこの間に2つの文字列を含めることで\ngsubにその引数を渡しています。\n_引数はやりたいことをメソッドに伝えるためにあります。_\n\n### 丸かっこ\n実のところ、丸かっこを省略したとしても、ほとんどの場合Rubyは気にしません。\nですので、次のように書くこともできます。\n__poem.gsub \"toast\", \"honeydew\"__\n\nこれまでも、他のメソッドをパラメータと一緒に使ってきました。\n実際には何回も使っています。けれど、まったく明白ではありませんでした。\n例えば、以下のように。\n\n    puts \"Hello\"\n    puts(\"Hello\")\n    \n\nそうです。__puts__もまたメソッドです。\nputsをかっこ有りで使っても、かっこ無しで使っても、Rubyは同じように扱います。\nけれど、かっこ無しの方がちょっとだけ読みやすいですね。そして、入力する時間も節約できます！\n\n> 逆に、コードがいい感じに読みやすいのであれば、かっこ有りで書くことだって自由です。\n\n### to (be) or not to (be): 生きるべきか死ぬべきか\n_する(to)_がメソッドで、_ある状態(be)_が引数であれば、古くからのこの質問の答えも明らかです。\n大事なのは、_生きる_あるいは_(ある状態に)する_ことを優先するかどうかだけなのです。\n\nシェイクスピアの気分になりましたか？読んでいきましょう。","load_code":"poem = \"My toast has flown from my hand\\nAnd my toast has gone to the moon.\\nYada yada yada\\n\""},
"33":{"lang":"JA","title":"じゃじゃ馬ならし","chapter":"N","answer":"^tame","ok":"よいです！","error":"","text":"Rubyの使い方はもう完全にわかりました。つまり、必要な道具はすべて手に入れたということです。\nあとは、よりたくさんのメソッドについて学び、より複雑な問題に挑戦していく必要があります。\n\nですが、まだ決着していないRubyの別の側面があります。独自のメソッドを作るということです。\n__エヘン！__それでは、次にそのやり方を学んでいきましょう。\n\n（putsやsort、timesなどの）Rubyの組み込みメソッドを使うこととは別に、独自のメソッドを定義することもできます。\nそれができると、何が嬉しいのでしょう？独自のメソッドを定義すると良い理由は、主に2つあります。\n\n### プログラムを短くするため\n同じことをプログラム内のいろんな場所で行う必要があるとき、メソッドに分割してそのコードを配置します。\nコードはより短くなるはずです。\n\n### コードを読みやすくするため\nプログラムで別々のことをたくさん行う必要があるとします。\nそれを一つの長いコードに詰め込むことも__できます__。\nけれど、それは後で読んだときに、とても読みにくく、理解しづらいものになってしまうでしょう。\n\n代わりに、コードを別々のメソッドに分割し、それぞれのメソッドに理解しやすい名前を与えましょう。\n後になって、それに感謝する時が来るはずです。\n\nでは、どうやってメソッドを定義したらいいでしょう？それには、次のようにします。\n\n    def tame( number_of_shrews )\n    end","load_code":""},
"34":{"lang":"JA","title":"RubyでDef Leppardと書くとLeppardメソッドの定義になる","chapter":"N","answer":"^tame","ok":"ならしても、ダメにしない","error":"","text":"大丈夫です。ちゃんとできました。あなたは独自のメソッドを定義しました。\ndefに続いて、メソッドの名前を書きます。\nそして、必要な場合は、その後に引数のリストを書きます。\nけっして怖くないですし、危なくもありません！\nすべきことは、中身をRubyのコードで埋めて最後にendで終わることです。\n\n以下に例を示します。\n    \n    def tame( number_of_shrews )\n      number_of_shrews.times {\n        puts \"じゃじゃ馬をならしました\"\n      }\n    end\n    \n> __補足__  \n> この章のタイトルにピンとこなかったでしょうか。\n> <a href=\"https://ja.wikipedia.org/wiki/デフ・レパード\" target=\"_blank\">Def Leppard</a>\n> はかつて有名だったイギリスのロックバンドです。","load_code":""},
"35":{"lang":"JA","title":"作成した熟成フルーツ","chapter":"N","answer":"^じゃじゃ馬をならしました","ok":"飼いならされたじゃじゃ馬たちです","error":"","text":"新しいメソッドが誕生しました。さっそく使ってみましょう。\n\n    tame 5","load_code":"def tame(number_of_shrews);number_of_shrews.times{puts \"じゃじゃ馬をならしました\"};end;"},
"36":{"lang":"JA","title":"ギブアンドテイク","chapter":"N","answer":"\\d+","ok":"いいです！ブラボー","error":"","text":"ほとんどのメソッドは、入力として複数のパラメータを必要とするだけでなく、__何かしらの値を戻します__。\n先ほどのメソッドを少し変更して、戻り値を返すようにしました。以下を試してみてください。\n\n    def tame( number_of_shrews )\n      number_of_shrews.times {\n        puts \"Tamed a shrew\"\n      }\n      return number_of_shrews\n    end\n    \n    puts tame(3)\n\n### return\nここまでだいぶ先に進んできて、いろいろわかるようになってきたかと思います。ですので、ここではもう一つ別のヒントを出すことにしましょう。\n上記のメソッドからは__return__という単語は省略できます。\nRubyはメソッド内で評価された最後の値を自動的に返します。\n\nですので、わたしたちは最後の行を__number\\_of\\_shrews__のように変更できます。\n\nなのですが、実は__.times__メソッドもまた_number\\_of\\_shrews_を返すので、最後の行をまったく取り除いてしまうことも可能です。つまり、実際には最初の実装でやりたかったことはすべてできてしまっていたのです！","load_code":""},
"37":{"lang":"JA","title":"やあ、誰がいますか？要約（その5）が帽子を振っています","chapter":"Y","answer":"","ok":"","error":"","text":"よくやりました、よくやりました、よくやりました！\n\nほんとうに、ほんとうに、ほんっとおぉぉぉぉぉに！\n\n人生のもっとも直近の数分であなたがやったことを、ここでおさらいしましょう。\n\n### メソッド\nメソッドは__def__のあとに名前を続けて定義します。\nメソッドはプログラムを短く、読みやすくできます。\n\n### 引数\nメソッドは引数を持てます。\n\n### 戻り値\nメソッドは（だいたいの場合）値を返します。\n\n## 今\n生きるべきか死ぬべきかはもう疑問ではなくなりました。\nシェイクスピアをもっと読む準備はできましたか？","load_code":""},
"38":{"lang":"JA","title":"世界はあなたの思いのまま","chapter":"N","answer":"^\\{\\\"William","ok":"いいですね。けれど少しばかり読みにくいです。","error":"","text":"ここまでは、自分自身で入力したものだけを使用するプログラムを実行してきました。\nそのことはよいのですが、それは言わば古い時代にあった叙事詩のようなものです。\nけれど、今はインターネット時代です。\nプログラミングの成果に、世界の残りを含めてもいい時代です。\n\nわたしたちは、とてもとてもたくさんのWebサイトを利用して、情報を要求することができます。\nたとえば、このリンクからはRubyに関する現在の<a href=\"http://news.google.com/news/section?q=ruby&output=rss\" target=\"_blank\">Googleニュースフィード</a>が手に入ります。\n\nWebブラウザは、おそらくとても良い感じにそれを表示してくれるでしょう。\nソースを表示したならば、奇妙にフォーマットされたテキストの長い文字列を確認できるはずです。\n先ほどのGoogleニュースフィードの例であれば、それは__rss__フォーマットというものになります。\n\n### フォーマット（形式）\n\nWeb上には、変わった名前を持ったとてもたくさんのフォーマットが存在し、利用されています。\nたとえば、htmlやxml、jsonといったフォーマットがあります。\nそうです、まさにこのWebサイトでも、これらのフォーマットを使用しています。\n\n試しに、インターネット上からウィリアム・シェイクスピアの全著作のリストを取得してくるメソッドを用意しました\n（実際にはこのWebサイトをホストしているサーバ上から取得してくるようにしています。誰にも迷惑はかかりませんので、ご安心ください）。\n\nデータを取得するには、次のようにします。\n\n    get_shakey","load_code":"def get_shakey;JSON.parse(\"{\\\"William Shakespeare\\\": {\\\"1\\\": {\\\"title\\\": \\\"The Two Gentlemen of Verona\\\", \\\"finished\\\": 1591},\\\"2\\\": {\\\"title\\\": \\\"The Taming of the Shrew\\\", \\\"finished\\\": 1591},\\\"3\\\": {\\\"title\\\": \\\"Henry VI, Part 2\\\", \\\"finished\\\": 1591},\\\"4\\\": {\\\"title\\\": \\\"Henry VI, Part 3\\\", \\\"finished\\\": 1591},\\\"5\\\": {\\\"title\\\": \\\"Henry VI, Part 1\\\", \\\"finished\\\": 1592},\\\"6\\\": {\\\"title\\\": \\\"Titus Andronicus\\\", \\\"finished\\\": 1592},\\\"7\\\": {\\\"title\\\": \\\"Richard III\\\", \\\"finished\\\": 1593},\\\"8\\\": {\\\"title\\\": \\\"Edward III\\\", \\\"finished\\\": 1593},\\\"9\\\": {\\\"title\\\": \\\"The Comedy of Errors\\\", \\\"finished\\\": 1594},\\\"10\\\": {\\\"title\\\": \\\"Love's Labour's Lost\\\", \\\"finished\\\": 1595},\\\"11\\\": {\\\"title\\\": \\\"Love's Labour's Won\\\", \\\"finished\\\": 1596},\\\"12\\\": {\\\"title\\\": \\\"Richard II\\\", \\\"finished\\\": 1595},\\\"13\\\": {\\\"title\\\": \\\"Romeo and Juliet\\\", \\\"finished\\\": 1595},\\\"14\\\": {\\\"title\\\": \\\"A Midsummer Night's Dream\\\", \\\"finished\\\": 1595},\\\"15\\\": {\\\"title\\\": \\\"King John\\\", \\\"finished\\\": 1596},\\\"16\\\": {\\\"title\\\": \\\"The Merchant of Venice\\\", \\\"finished\\\": 1597},\\\"17\\\": {\\\"title\\\": \\\"Henry IV, Part 1\\\", \\\"finished\\\": 1597},\\\"18\\\": {\\\"title\\\": \\\"The Merry Wives of Windsor\\\", \\\"finished\\\": 1597},\\\"19\\\": {\\\"title\\\": \\\"Henry IV, Part 2\\\", \\\"finished\\\": 1598},\\\"20\\\": {\\\"title\\\": \\\"Much Ado About Nothing\\\", \\\"finished\\\": 1599},\\\"21\\\": {\\\"title\\\": \\\"Henry V\\\", \\\"finished\\\": 1599},\\\"22\\\": {\\\"title\\\": \\\"Julius Caesar\\\", \\\"finished\\\": 1599},\\\"23\\\": {\\\"title\\\": \\\"As You Like It\\\", \\\"finished\\\": 1600},\\\"24\\\": {\\\"title\\\": \\\"Hamlet\\\", \\\"finished\\\": 1601},\\\"25\\\": {\\\"title\\\": \\\"Twelfth Night\\\", \\\"finished\\\": 1601},\\\"26\\\": {\\\"title\\\": \\\"Troilus and Cressida\\\", \\\"finished\\\": 1602},\\\"27\\\": {\\\"title\\\": \\\"Sir Thomas More\\\", \\\"finished\\\": 1604},\\\"28\\\": {\\\"title\\\": \\\"Measure for Measure\\\", \\\"finished\\\": 1604},\\\"29\\\": {\\\"title\\\": \\\"Othello\\\", \\\"finished\\\": 1604},\\\"30\\\": {\\\"title\\\": \\\"All's Well That Ends Well\\\", \\\"finished\\\": 1605},\\\"31\\\": {\\\"title\\\": \\\"King Lear\\\", \\\"finished\\\": 1606},\\\"32\\\": {\\\"title\\\": \\\"Timon of Athens\\\", \\\"finished\\\": 1606},\\\"33\\\": {\\\"title\\\": \\\"Macbeth\\\", \\\"finished\\\": 1606},\\\"34\\\": {\\\"title\\\": \\\"Antony and Cleopatra\\\", \\\"finished\\\": 1606},\\\"35\\\": {\\\"title\\\": \\\"Pericles, Prince of Tyre\\\", \\\"finished\\\": 1608},\\\"36\\\": {\\\"title\\\": \\\"Coriolanus\\\", \\\"finished\\\": 1608},\\\"37\\\": {\\\"title\\\": \\\"The Winter's Tale\\\", \\\"finished\\\": 1611},\\\"38\\\": {\\\"title\\\": \\\"Cymbeline\\\", \\\"finished\\\": 1610},\\\"39\\\": {\\\"title\\\": \\\"The Tempest\\\", \\\"finished\\\": 1611},\\\"40\\\": {\\\"title\\\": \\\"Cardenio\\\", \\\"finished\\\": 1613},\\\"41\\\": {\\\"title\\\": \\\"Henry VIII\\\", \\\"finished\\\": 1613},\\\"42\\\": {\\\"title\\\": \\\"The Two Noble Kinsmen\\\", \\\"finished\\\": 1614}}}\");end;"},
"39":{"lang":"JA","title":"二人の貴公子","chapter":"N","answer":"^The Two Noble Kinsmen$","ok":"たいへんよいです","error":"","text":"いいですね。インターネットから戯曲のリストを取得できました。リストはjsonフォーマットになっていました。\n幸いなことに、RubyはjsonデータをRubyのハッシュに変換するメソッドを提供しています。\n今回は、_get_shakey_メソッドがすでにそれをやってくれていました。\n\nただ、ハッシュにはなりましたが、jsonデータの構造を保ち続けているためにちょっとばかり読みにくいです。\n戯曲のリストをいい感じに表示するメソッドを書いていきましょう。\n\n注意深く戯曲のリストを確認してみると、それがある種のネスト構造を持っていることに気がつくでしょう\n（こうしたことはインターネットから取得するデータには実際よくあることです）。以下のような感じです。\n\n<ul>\n  <li>\"William Shakespeare\"\n  <ul>\n      <li>\"1\"\n      <ul>\n        <li>\"title\": \"The Two Gentlemen of Veron\"</li>\n        <li>\"finished\": 1591</li>\n      </ul>\n      </li>\n      <li>\"2\"\n      <ul>\n        <li>\"title\": \"The Taming of the Shrew\"</li>\n        <li>\"finished\": 1591</li>\n      </ul>\n      </li>\n      <li>...</li>\n  </ul>\n  </li>\n</ul>\n\n戯曲をリストにするために、まずいちばん上の\"William Shakespeare\" というハッシュ要素に、名前を指定してアクセスする必要があります。\n次に、そこから下の要素を__繰り返し__ていきます。\n\nRubyには繰り返していくためのメソッドがあります。それが__each__メソッドです。\nこのメソッドは書評システムを作成したときにも使いました。\n\n__each__メソッドが返すものはすべて、次のようにブロックに渡されます。\n\n\n    s = get_shakey\n    \n    s[\"William Shakespeare\"].each { |key, val|\n      puts val[\"title\"]\n    }","load_code":"prev"},
"40":{"lang":"JA","title":"すべてを一緒に","chapter":"N","answer":"^4$","ok":"そうです。シェイクスピアは1591年に4つの戯曲を書きました","error":"1591年の答えは4になります","text":"ここで、ある年にシェイクスピアによって書かれた戯曲の数と名前のリストだけを知りたいとします。\n\nRubyでは、ハッシュから値を選び出す(__select__)ことができます。\nselectメソッドは、選び出す条件をブロックとして渡すと、条件に該当した値のリストを返します。\n\n__select__ブロックのあとにそのまま__each__ブロックをつなげることで、\nselectメソッドから返ったリストを使い、__each__メソッドを呼ぶことができます。\nこれはメソッド連鎖の別の例です。メソッド連鎖については、詩をひっくり返す際に軽くお話ししました。\n\n上記を行う__count\\_plays__メソッドを用意しました。\n以下のコードをもとに、__1591__年にシェイクスピアによってどのくらいの数の戯曲が書かれたかを調べてみてください。\n\n    def count_plays(year)\n      s = get_shakey\n      \n      s[\"William Shakespeare\"]\n        .select { |k, v|\n          v[\"finished\"] == year\n        }.each { |key, val|\n          puts val[\"title\"]\n        }.count\n    end\n    \n    puts count_plays(0)\n\ncountメソッドをeachメソッドの終わりにつなげていることに気づきましたか？\nこの値が__count\\_plays__メソッドの戻り値になります。\n\nメソッド連鎖のまた別の具体例を示します。_s = get_shakey__ という行を見てみてください。\nここで、get_shakeyのうしろに__[\"William Shakespeare\"].select { |k, v|__ と続けることもできます\n（この場合はドットは付けないでください）。","load_code":"prev"},
"41":{"lang":"JA","title":"終わりよければ全てよし","chapter":"N","answer":"All's Well That Ends Well","ok":"確かに","error":"2つ目の引数に1605を与えてください","text":"いくつかのデータをインターネットから取得し、そこから欲しいものを選び出して出力しました。\nもっとよくするには、あと何が残っているでしょう？結果の表示をもう少しよくするとよいでしょうか。\nたとえば年を追加して、書名と年を揃えて表示するのはどうでしょう。\n\nこれは、いくつかの値を1行に表示するということです。\nRubyにはそれをするためのきちんとした方法があります。\n__puts \"Hi, my name is Jimmy\"__のように、単なる文字列を表示するようなものです。\nですが、文字列リテラル_Jimmy_の代わりに、変数の値を使います。\n\nまず__Jimmy__を __#{}__に置き換えます。Rubyは波かっこがつづく#を見た場合は、{ かっこの中に変数を探します } 。つまり、次のように書くことができます。__\"Hi, my name is #{name}\"__。\n\nでは、コードを少しばかり変更しましょう。\n\n    def print_plays(year_from, year_to)\n      get_shakey[\"William Shakespeare\"]\n        .select { |k, v|\n          year_from <= v[\"finished\"] &&\n          year_to   >= v[\"finished\"]\n        }.each { |k, v|\n          puts \"#{v[\"title\"].ljust(30)} #{v[\"finished\"]}\"\n        }\n    end\n    print_plays(1600, 1605)\n\n書名に__.ljust(30)__を追加しました。これによって書名は30文字の長さのなかで_左寄せ(left justified)_され、年の表示位置がいいかんじに整列されます。\n\nプログラムの出力が変更したことを確認したら、戯曲を表示する箇所を次のように変更してください。__1600 -> あなたの好きな値__\n\n__終わりよければ全てよし？__いいえ、まだおしまいではありません。けれど、それはもう目前です！","load_code":"prev"},
"42":{"lang":"JA","title":"意思決定の仕方について知っている唯一のこと","chapter":"N","answer":"","ok":"","error":"","text":"意思決定、それは実際の暮らしでは実に厄介な問題です。まあ、私たちにとっては、そうでもないですが。\nRubyはいとも簡単に意思決定を行います。\n\n    if 1 < 2\n      puts \"真: 1は2より小さい\"\n    end\n\nここで鍵となる単語は__if__です。ifは、メソッドの前に配置することもできれば、\n次のように後ろにも配置できます。\n\n    puts \"真: 1は2より小さい\" if 1 < 2\n\n__if__は引数を1つ持つメソッドです。その引数で、どんな任意の式もテストできます。\n式の結果はかならず__true（真）__か__false（偽）__でなければなりません。\n次に、こうした結果となるいくつかの式の例を示します。\n\n    5     <= 10     # => true\n    'abc' == 'def'  # => false\n    true            # => true\n    123456          # => true\n    0               # => true\n    nil             # => false\n    'xyz'.empty?    # => false\n    'a' > 5         # => エラー:\n                    # 文字列と数値は比較できません\n\n_if式_は多くの形を取ることができます。リテラルの値同士（1 < 2）を比較できます。\nまた、変数同士（a < 1）を比較できます。\nそして、メソッドの戻り値（'xyz'.empty?）も扱えます。","load_code":""},
"43":{"lang":"JA","title":"そしていよいよ終わりの始まり","chapter":"N","answer":"は100と等しくありません$","ok":"良くなりました","error":"正しくありません","text":"__'abc' == 'def'__でイコール記号が2つあることに気づきましたか？\n\n__==__は__等しい__という意味になります。\nイコール記号が1つしかない場合は、以前にやったとおり、__変数に値を設定する__という意味になります。\n\nより混乱させることになりますが、ifメソッドの後に変数への値の設定をすることもあります。\n次のようになります。\n\n    a = 0\n    \n    if a = 100\n      puts \"式はtrueです。けれど、aの値は#{a}となりました。\"\n    else\n      puts \"#{a}は100と等しくありません\"\n    end\n\n=を==に変更してどうなるかを確認してください。\n\n保証しますが、ことあるごとにあなたは二つ目のイコール記号を入力し忘れてしまうでしょう。\nいまだに私も忘れてしまうことがあります。\n\n### else\n先ほどのコードで、else式を追加しました。\nこの箇所は__if テストする式__がfalseと評価した際に実行されることになります。\n\n> このif-then-elseの書き方には、もっとたくさんのバリエーションがあります。\n> 詳しく知りたい方は<a href=\"http://www.ruby-doc.org/core/doc/syntax/control_expressions_rdoc.html\" target=\"_blank\">ここ</a>を読んでください。","load_code":""},
"44":{"lang":"JA","title":"腹ペコです","chapter":"N","answer":"^腹ペコじゃないです$","ok":"はい","error":"まさか10時にはお腹は空きませんよ！","text":"さて、ここまではとても順調に行っています。簡単だと感じたかもしれませんが、\nたった15分前までは__Rubyがいかなるものか__何も知らなかったことを覚えておいてください！\n\n最後のステップです。ぜんぶを一つにしていきましょう。いいですか？\n眩しい日差しの中、浜辺で光り輝くウィンドチャイムの響きのように、\nこれまでやってきたことを調和させ、美しく奏でましょう！\n\nまず2つのメソッドを定義し、次に判定を行います。\n\n    def hungry?(time_of_day_in_hours)\n      puts \"腹ペコです\"\n      true\n    end\n    \n    def eat_an(what)\n      puts \"#{what}を食べます\\n\"\n    end\n    \n    eat_an 'リンゴ' if hungry?(14)\n    \n    eat_an 'リンゴ' if hungry?(10)\n\n__hungry?__メソッドを、時間(引数で渡された値）が12未満だった場合に\n__\"腹ペコじゃないです\"__と表示してfalseを返すように変更できるか確かめてみてください。","load_code":""},
"45":{"lang":"JA","title":"要約（その6）まで来ました","chapter":"Y","answer":"\\{\\}","ok":"そうです。それが空のハッシュです","error":"","text":"あなたはレベル6のRuby聖職者です。偉大な仕事を為しました。確認していきましょう。\n\n### データ\nインターネットからデータを読み込み、データ構造に変換し、値を選び出しました。\n\n### 繰り返し\nハッシュのすべての要素を繰り返し取り出し、さらにメソッドを連鎖させました。\n\n### プリティプリント\nそして手に入った値が十分ではなかったので、人が読みやすい形に書式を整え、値を表示させました。\nつまり、__現実のプログラムを作りました！__\n\n### if\nプログラムを__if__文と__else__文を使って制御する方法を学びました。\n\n## そして\n次は何でしょう？ここからは何を学ぶ必要があるでしょうか？\nこれからが一番いいところです。\nあなたが進んできたのは、私たちがクラスを発見するまで辿ってきた長い道のりのようなものです。\nあと2つ、ここまで程は長くないレッスンをやれば、おしまいです。\n\n以前、次のようなハッシュを作成しました。\n\n    Hash.new","load_code":""},
"46":{"lang":"JA","title":"学生ではなく、労働者","chapter":"N","answer":"","ok":"","error":"","text":"先ほど確認した空の波かっこ{}は、Hash.newのショートカットです。\nnewメソッドは特定のクラスのオブジェクトを作成するために使われます。\n「クラス（class）」とは「労働者（working class）」 &mdash; \n同じ仕事を持ち、同じシャツを着た、似たようなオブジェクトの集まりのようなものだと考えてください。\nクラスはどのように使うのでしょうか？\n\n### Blurbalizer<sup>TM</sup>\n新しいアプリに関する素晴らしいアイデアを思いついたとします。\nそれは、次世代のインスタントメッセージプラットフォームになるでしょう。\nアプリが扱うメッセージのことはBlurbs<sup>TM</sup>と呼ぶことにします。\nBlurbs<sup>TM</sup>の長さは最大でたった40文字です。\nそこに気分もつけられるようにしましょう。\n\n<!---インターネットは失墜した棒人間と顔文字を本当に持ち帰ってきました。__顔文字！__ -->\n\n### スタート地点\n\nさて、あなたはJSONファイルにBlurbs<sup>TM</sup>のエントリを格納するでしょうか。あってます？\nでも、どうやって投稿された時刻とエントリの中身を記録しますか？\nそしてファイルを読み込んだ中身は、Rubyではどのように扱えるでしょう？\nハッシュか、それとも配列でしょうか？あるいは配列の配列？もしくは他の何か？\n\n### クラス\nおそらく、あなたはクラスを使いたくなるはずです。\nあなたはすでに、たくさんのクラスと馴染んでいます。HashやArray、Stringなどです。\nでは、（何も出力しない）新しいクラスを作りましょう。\n\n    class Blurb\n    end","load_code":""},
"47":{"lang":"JA","title":"アプリを作るもの","chapter":"N","answer":"","ok":"","error":"","text":"新しくBlurb<sup>TM</sup>クラスを開きました。\nブログエントリは一体何で作られるでしょう？そうです、コンテンツです。\nそれからBlurb<sup>TM</sup>が投稿された時刻、そして気分も必要でしょう。\n\n先ほどはクラスの最初の行を用意しました。以下が残りの部分になります。\n\n    class Blurb\n      attr_accessor :content, :time, :mood\n    end\n\nクラス名は常に大文字から始まります。\n\n（まだ何も出力しません）","load_code":""},
"48":{"lang":"JA","title":"アクセサはぶらぶらとした手","chapter":"N","answer":"Blurb:","ok":"はじめての手","error":"","text":"なかなか素質がありますね。これで、新しいBlurb<sup>TM</sup>クラスを手に入れました。\n\nクラス定義の中で、attr\\_accessorと呼ばれるメソッドを使いました。\nこうした属性(_attr_ibute)メソッドの多くは、クラスにわずかばかりの設定を加えます。\nこれらの属性は、ちょうどクラスに付属する変数のようなものです。\n\nこれがどういうことかを考えてみます。\nクラスは人のようなものです。星型の人を想像してください。\nそして属性は、体を構成し他の人との握手も可能にする、ぶらぶらとした手です。\n\n### ここから\nBlurb<sup>TM</sup>を生成して、コンテンツを設定するために、以下のようにしてください。\n\n    blurb1 = Blurb.new\n    puts blurb1\n    blurb1.content = \"Today Mount Hood Was Stolen!\"","load_code":"class Blurb;attr_accessor :content,:time,:mood;end"},
"49":{"lang":"JA","title":"オブジェクトとは、キチンとした小さなパッケージ","chapter":"N","answer":"Blurb:","ok":"Blurbを更新しました","error":"","text":"先に進み、Blurb<sup>TM</sup>に時刻と気分を設定してください。\n\n    blurb1.time = Time.now\n    blurb1.mood = :sick\n    \n    puts blurb1","load_code":"prev;blurb1=Blurb.new;blurb1.content=\"Today Mount Hood Was Stolen!\""},
"50":{"lang":"JA","title":"ペースを速めて","chapter":"N","answer":"^\\d{4}","ok":"記録されました","error":"","text":"いい感じです。じゃあ、ちょっとだけ軽く何か作ってみましょう。\nBlurb<sup>TM</sup>するごとに毎回時間を設定したくはないでしょう。\n\n内容の入力と気分の選択だけしたいですよね？\n\n__initialize__メソッドをクラスに追加しましょう。\nこのメソッドは新しいBlurb<sup>TM</sup>がつくられるたびに呼び出されます。\n同時に、Blurb<sup>TM</sup>の内容を40文字に制限することもできます。\n\n    class Blurb\n      attr_accessor :content, :time, :mood\n\n      def initialize(mood, content=\"\")\n        @time    = Time.now\n        @content = content[0..39]\n        @mood    = mood\n      end\n    end\n    \n    Blurb.new.time\n\n（引数の__content=\"\"__という部分は、内容が文字列であると確認するためにあります。\nこう書くことで、たとえcontent部分の引数が与えられなったとしても空文字が渡されます。）","load_code":""},
"51":{"lang":"JA","title":"意味ないものは拒むようにしつけました","chapter":"N","answer":"Blurb:","ok":"Blurbが追加されました","error":"","text":"クラスの内側がどうなっているかを確認し、アットマークが付いたシンボル(@time)を使いました。\n\nクラスの__外側__では、アクセサを使います。\n\n> __blurb.time = Time.now__\n\nですが、__内側__では__オブジェクトの変数__を使います。\n\n> __@time = Time.now__\n\nこれらは実際には同じことです。しかしプログラムの2つの異なる場所では異なる表現を使います。\n\n### 別のBlurb<sup>TM</sup>を作る\n新しいBlurb<sup>TM</sup>を作成すると、initializeメソッドは新しい任意の引数用に使われます。\n\nあ、2つの引数が必要です。\n\n    Blurb2 = Blurb.new :confused, \"I can not believe Mt. Hood was stolen!\"","load_code":"class Blurb;attr_accessor :content,:time,:mood;def initialize(mood, content=\"\");@time=Time.now;@content=content[0..39];@mood=mood;end;end;blurb1=Blurb.new(:sick,\"Today Mount Hood Was Stolen!\")"},
"52":{"lang":"JA","title":"キリンは要約（その7）を盗みません","chapter":"Y","answer":"","ok":"","error":"","text":"やっと、ここまできました。すべてを1つにしました。まだアプリを現実に近づけるつもりですが、その前にやったことを振り返りましょう。いいですか？\n\n### クラス\nRubyのすべてはオブジェクトです。クラスはオブジェクトを説明するもので、特定のオブジェクトがどう動くかを説明します。\n例えば、いくつか新しいBlurb<sup>TM</sup>オブジェクトを作成したとすると、それらのオブジェクトはクラスによって説明されたということです。\nつまり、それらはBlubオブジェクトです。\nクラスを（ある種）現実世界のオブジェクトのモデルとして使うことができます。\n\n### アクセサ\nアクセサは、オブジェクトの__外__から使うことのできる、オブジェクトに付けられた変数です。\n（blurb2.time = Time.now）\n\n### オブジェクトの変数\nオブジェクト変数はアクセサで触れる変数と同じです。けれど、オブジェクトの__内側__にあります。\n（@time = Time.now）","load_code":"prev;blurb2=Blurb.new :confused, \"I can not believe Mt. Hood was stolen!\""},
"53":{"lang":"JA","title":"あなた自身の芝","chapter":"N","answer":"Blurbalizer:","ok":"アプリが作られました","error":"","text":"さて、全部をまとめ上げましょう。ここからがTry Rubyの魅惑的な壮大なストーリーの最後の章です！\n今やあなたはすべての機能を堪能しました。\n家の周りやあなたが経営する食料品店の冷蔵庫の中で、どうそれを使うつもりですか？\nあなたは（私のお気に入りの）偉大な人物ではありますが、ガイドは必要です。\n\n### アプリケーションを完成させましょう\nあなたはアプリの要素は持っています。\nけれど実際のアプリではありません。\nタイトルやすべてのBlurbs<sup>TM</sup>を格納する場所、順序通りのタイムラインなどが必要です。\n\n推測したとおり、これから新しい別のクラスを作ります。\n新しいクラスのためのコードを全て一度に提供します。\nぜんぜん勉強に__時間をかけてかまいませんよ__。\n私は急ぎませんよ。次のレッスンにあなたが来るのを待っています。\n\n    class Blurbalizer\n      def initialize(title)\n        @title  = title\n        @blurbs = [] # A fresh clean array\n                     # for storing Blurbs\n      end\n      \n      def add_a_blurb(mood, content)\n        # The << means add to the end of the array\n        @blurbs << Blurb.new(mood, content)\n      end\n      \n      def show_timeline\n        puts \"Blurbify: #{@title} has #{@blurbs.count} Blurbs\"\n        \n        @blurbs.sort_by { |t|\n          t.time\n        }.reverse.each { |t|\n          puts \"#{t.content.ljust(40)} #{t.time}\"\n        }\n      end\n    end\n    \n    myapp = Blurbalizer.new \"The Big Blurb\"","load_code":"class Blurb;attr_accessor :content,:time,:mood;def initialize(mood, content=\"\");@time=Time.now;@content=content[0..39];@mood=mood;end;end"},
"54":{"lang":"JA","title":"あのBlurbは何のこと？","chapter":"N","answer":"Today","ok":"Blurbをもたらしました","error":"","text":"その調子です。Blurbalizer<sup>TM</sup>クラスの中のコードがどんなことをしているか理解しましたか？\n\n> Blurbalizer<sup>TM</sup>クラスには2つの__メソッド__（add\\_a\\_blurbとshow\\_timeline）があります。\n> アクセサと同じように、これらのメソッドはクラスの外側で使用できます。\n\nBlurbalizer<sup>TM</sup>を使うときです。すでにいくつかのBlurb<sup>TM</sup>を読み込んであります。\nですが、あなた自身の手でもBlurbを自由に追加してみてください。\n\nBlurb<sup>TM</sup>は直接作成せず、Blurbalizer<sup>TM</sup>クラスのadd\\_a\\_blurbメソッドを使って作成します。これによって、すべてのBlurb<sup>TM</sup>がmyappオブジェクトの中に格納されていることを確認できます。\n\n    myapp.add_a_blurb :moody, \"ここにBlurbを追加します\"\n    \n    myapp.show_timeline","load_code":"prev;class Blurbalizer;attr_reader :title;def initialize(title);@title=title;@blurbs=[];end;def add_a_blurb(mood, content);@blurbs << Blurb.new(mood, content);@blurbs.each {|t| t.time -= 73};end;def show_timeline;puts \"Blurbalizer: #{@title} has #{@blurbs.count} Blurbs\\n\";@blurbs.sort_by { |t| t.time}.reverse.each { |t| puts \"#{t.content.ljust(40)} #{t.time}\"};end;end;myapp = Blurbalizer.new \"The Big Blurb\";myapp.add_a_blurb :sick,\"Today Mount Hood Was Stolen!\";myapp.add_a_blurb :confused,\"I can not believe Mt. Hood was stolen!\";myapp.add_a_blurb :dazed,\"I am speechless!\";myapp.add_a_blurb :mad,\"It was stolen by a giraffe !!\";myapp.add_a_blurb :sad,\"I Left my Hoodie on the Mountain!\";myapp.add_a_blurb :mad,\"I am never going back to that mountain.\""},
"55":{"lang":"JA","title":"すべてを繋ぎ合わせます","chapter":"N","answer":":-","ok":"気分いい！","error":"","text":"Rubyのシンプルな部品を使うと、とりわけ新しいものに部品をつなぎ合わせる際、\nいくらか美しいものにすることが可能です。\nここで別のクラスを含むクラスで作られたアプリを作ったように、\nRubyはある種の人間にとって本当に良いことをします。\nそれはオブジェクト指向プログラミングと呼ばれます。\n\nTryRubyの__最後のプログラミングの訓練__にたどり着きました。\nやってみたければ、あたらしい機能をBlurbalizer<sup>TM</sup>に追加できます。\n\nおそらく、__show_timeline__メソッドの中に顔文字として気分を出力したいでしょう。\n_moodify_メソッドをBlurb<sup>TM</sup>に追加し、_show\\_timeline_メソッド内で使います。\n\n    class Blurb\n      attr_accessor :content, :time, :mood\n      \n      def initialize(mood, content=\"\")\n        @time    = Time.now\n        @content = content[0..39]\n        @mood    = mood\n      end\n      \n      def moodify\n        if    @mood == :sad\n          return \":-(\"\n        elsif @mood == :happy\n          return \":-)\"\n        # Add other moods here\n        end\n\n        # The default mood\n        \":-|\"\n      end\n    end\n    \n    class Blurbalizer\n      def initialize(title)\n        @title  = title\n        @blurbs = []\n      end\n      \n      def add_a_blurb(mood, content)\n        @blurbs << Blurb.new(mood, content)\n      end\n      \n      def show_timeline\n        puts \"Blurbalizer: #{@title} has #{@blurbs.count} Blurbs\"\n        \n        @blurbs.sort_by { |t|\n          t.time\n        }.reverse.each { |t|\n          puts \"#{t.content.ljust(40)} #{t.time}\"\n        }\n      end\n    end\n    \n    myapp.show_timeline","load_code":"prev"},
"56":{"lang":"JA","title":"要約（その8）です。リラックスして聞いてください","chapter":"Y","answer":"","ok":"","error":"","text":"この最後の章は幕を閉じ、Rubyをどう使えるかについていくつかのポインタを示すためにあります。\n\nここまで楽しめたなら、<a href=\"/playground\">TryRuby Playground</a>で続けることもできますし、\nRubyをダウンロードしてインストールすることもできます。\n<a href=\"https://www.ruby-lang.org/ja/downloads/\" target=\"_blank\">ruby-lang.org</a>\n\nRubyをインストールしたなら、_my\\_first\\_program.rb というファイルを作成し、\nテキストエディタでファイルを開いて、適当なRubyコードを書いて実行してみてください。\nプログラムを実行するには、コマンドプロンプトを開き、次のように入力します。\n\n    ruby my_first_program.rb\n\nエディタとファイルブラウザ、'ruby-runner'などが一つになった、\nたくさんの（フリーな）開発ツールが存在しています。\n\n## おめでとうございます\n\nあなたは、何度も砂糖衣をかけた二層ケーキや、ダブルギターを弾くギタープレイヤーに本当に値します。\nつまり終わったということです。本当にやり遂げました！疑いようがありません。\nこれであなたは__認定元気いっぱい利口者__です！\n\n## もっと情報が欲しいなら\n\nこのウェブサイトにいくつか記事があります。\nそれらを読めばここから先どこに行けばいいかのポインタをいくつか手に入れられます。","load_code":"def ruby(f);puts \"www.ruby-lang.orgに行ってRubyをダウンロードしましょう\";end;class K;attr_reader :rb;end;my_first_program=K.new"}}