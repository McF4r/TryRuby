{"1":{"lang":"EN","title":"Got 30 minutes? Give Ruby a shot right now!","chapter":"Y","answer":"","ok":"","error":"","text":"Ruby is a programming language from Japan which is revolutionizing\nsoftware development.\n\nThe beauty of Ruby is found in its balance between simplicity and power.\n\nYou can type some Ruby code in the editor and use these buttons to navigate:\n\n- __Run__ &rarr; Executes the code in the editor\n- __Copy__ &rarr; Copies the example code to the editor\n- __Next__ &rarr; Allows you to go to the next lesson\n- __Back__ &rarr; Allows you to return to the previous lesson\n- __Clear__ &rarr; Clears the editor\n\nUse the 'world' button <span aria-hidden=\"true\" class=\"glyphicon glyphicon-globe\"></span>\nabove to change TryRuby's language.\n\n### Click on __Next__ to start learning.","load_code":""},
"2":{"lang":"EN","title":"Using the editor","chapter":"N","answer":"^\\d{1,}$","ok":"Good! You did a bit of math. See how the answer popped out?","error":"Type 2 + 6 in the editor","text":"The editor window at the bottom is where you type your Ruby code, hit the __Run__ button and\nwatch it run!\n\nFor example, try typing some math. Like:\n\n    2 + 6\n\nThe output of your program should show itself at the output window at the top.\nThere should also be a line that tells you how well you did.\n\n> Alternatively you can hit the __Copy__ button to copy the example code to the editor.","load_code":""},
"3":{"lang":"EN","title":"Numbers and Math","chapter":"N","answer":"^[0-9\\.,-]{1,}$","ok":"Good","error":"","text":"Ruby recognizes numbers and mathematic symbols. You could try some other math like:\n\n    4 * 10\n    5 - 12\n    30 / 4","load_code":""},
"4":{"lang":"EN","title":"Putting it differently","chapter":"N","answer":"^[0-9\\.,-]{1,}$","ok":"Well put","error":"","text":"Did you notice that if you typed more than one formula you only saw the answer for the last one.\nWhat is going on?\n\n> To make this website easier to use I have told Ruby to copy the result of your program to the\n> output screen at the top. So when you type a formula you get to see the results.\n> __But only the last result.__ And only if the output is still empty.\n\nSo when you entered 2 or more formulas, Ruby only showed the result of the last formula.\n\nOf course you have the power to control the screen! Just type __puts__ before each formula\n(with a space in between). Puts means: *'put something on the screen'*.\n\nTry this:\n\n    puts 4 * 10\n    puts 5 - 12\n    puts 30 / 4\n\nNow remove the puts from the last formula and see what happens.","load_code":""},
"5":{"lang":"EN","title":"Say Your Name","chapter":"N","answer":"[a-zA-Z]{1,1}","ok":"Perfect, you've formed a string from the letters of your name","error":"","text":"Sure, computers are handy and fast for math. Let's move on. Want to see your name reversed?\n\nFirst type your first name in quotes like this:\n\n    \"Jimmy\"","load_code":""},
"6":{"lang":"EN","title":"Say Your Name Backwards","chapter":"N","answer":"\\w+","ok":"dooG","error":"","text":"A string is a set of characters the computer can process. Imagine the letters are on a string of\nlaundry line and the quotes are clothespins holding the ends. The quotes mark the beginning and end.\n\nTo reverse your name, type: \n\n    \"Jimmy\".reverse\n\n(Don't forget the dot!)","load_code":""},
"7":{"lang":"EN","title":"Counting the Letters","chapter":"N","answer":"^\\d+$","ok":"Yep. Length is also a 'method'","error":"","text":"You have used the reverse __method__ on your name! By enclosing your name in quotes, you made a string. Then you called the reverse method, which works on strings to flip all the letters backwards.\n\nNow, let us see how many letters are in your name:\n\n    \"Jimmy\".length","load_code":""},
"8":{"lang":"EN","title":"On Repeat","chapter":"N","answer":"(\\w+)","ok":"Nice to meet you.Nice to meet you.Nice to meet you.","error":"","text":"Now, you're probably wondering what any of this is good for.\n\nWell, I'm sure you've been to a website that screamed, __Hey, your password is too short!__\n\nSee, some programs use that simple __.length__ code.\n\nWatch this. Let's multiply your name by 5. \n\n    \"Jimmy\" * 5","load_code":""},
"9":{"lang":"EN","title":"Hey, Summary #1 Already","chapter":"Y","answer":"NoMethodError|undefined","ok":"Nope, it is not possible to reverse a number. Click 'next'","error":"","text":"Let's look at what you've learned in the first minute.\n\n### The editor\nTyping code into the editor and clicking on run gives you an answer in the output window.\n(Almost) all code gives an answer.\n\n### Numbers and strings\nNumbers and strings are Ruby's math and text objects.\n\n### Methods\nYou've used English-language methods like reverse and length. And symbolic methods like the\nmultiplication method: \\*  \n__Methods mean action!__\n\nThis is the essence of your learning. Taking simple things, toying with them and turning them into\nnew things. Feeling comfortable yet? I promise you are.\n\n## Okay,\nlet's do something uncomfortable. Try reversing a number:\n\n    40.reverse","load_code":""},
"10":{"lang":"EN","title":"Stop, You're Barking Mad!","chapter":"N","answer":"^\\d{1,}$","ok":"Only strings can be reversed","error":"","text":"You can't reverse the number forty. I guess you can hold your monitor up to the mirror, but reversing a number just doesn't make sense.\n\nRuby has tossed an error message. Ruby is telling you there is no method reverse for numbers.\n\nMaybe if you turn the number into a string first:\n\n    40.to_s.reverse","load_code":""},
"11":{"lang":"EN","title":"Apples are Different From Oranges","chapter":"N","answer":"\\[\\]","ok":"Great, that's an empty list","error":"","text":"And numbers are different from strings.\n\nWhile you can use methods on any object in Ruby, some methods only work on certain types of things.\nBut you can always convert between different types using Ruby's \"to\" methods.\n\n- __to_s__ converts things to __s__trings\n- __to_i__ converts things to __i__ntegers (numbers)\n- __to_a__ converts things to __a__rrays\n\n__What are arrays?!__\n\nThey are lists. Type in a pair of brackets:\n\n    []","load_code":""},
"12":{"lang":"EN","title":"Standing in Line","chapter":"N","answer":"^\\[([-\\.\\d]+)(\\s*,\\s*[-\\d\\.]+){3,}\\]$","ok":"Excellent","error":"Try adding a fourth number to the list","text":"Lists (arrays) store things __in some order__.\n\nLike standing in line for popcorn. You are behind someone and you wouldn't dream of pushing them aside,\nright? And the guy behind you, you've got a close eye on him, right?\n\nHere's a list for you. Lottery numbers: \n\n    [12, 47, 35]\n\nTry adding a number to this list: type a comma after 35 followed by a number. The space is optional.","load_code":""},
"13":{"lang":"EN","title":"One Raises Its Hand","chapter":"N","answer":"^47$","ok":"Okay","error":"","text":"A list of lottery numbers. Which one is the highest?\n\nTry: \n\n    [12, 47, 35].max","load_code":""},
"14":{"lang":"EN","title":"Tucking a List Away","chapter":"N","answer":"^\\[(\\d+)(,\\s*\\d+){2,}\\]$","ok":"Saved!","error":"","text":"Good, good. But it's annoying to have to retype that list every time you need it, isn't it?\n\nLet's save our numbers inside a ticket like so: \n\n    ticket = [12, 47, 35]","load_code":""},
"15":{"lang":"EN","title":"Now Type Ticket","chapter":"N","answer":"\\[(\\d+(, )?){2,}\\]","ok":"Restored!","error":"","text":"Now, type:\n\n    ticket","load_code":"ticket = [12, 47, 35]"},
"16":{"lang":"EN","title":"Saved, Tucked Away","chapter":"N","answer":"\\[12, 35, 47\\]","ok":"You've sorted the list","error":"","text":"You've hung on to your lotto numbers, tucking them away inside a __variable__ called ticket.\nBut any other name, like _jimmyslist_, would have been fine too.\n\nProgramming, you will discover, is mostly about working with variables.\n\nLet's put your lotto numbers in order, how about?\n\nUse: \n\n    ticket.sort!\n    \nYou had a list. You sorted the list. The ticket variable is now changed.  \nDid you notice that the _sort!_ method has a big, bright exclamation at the end?  \nA lot of times Ruby methods shout like that if they alter the variable for good.\nIt's nothin special, just a mark.","load_code":"ticket = [12, 47, 35]"},
"17":{"lang":"EN","title":"Elemental","chapter":"N","answer":"^(12|35|47)$","ok":"Ok","error":"Almost","text":"So we stored our lotto numbers inside variable ticket. How to get 'em out again?\n\nWe already saw that we can get the highest number with __max__. Similarly you can\nget the __first__ or the __last__ element of the list.\nBut what if you want a specific element?\n\n### [ ]\nRuby uses the square brackets [ ] to target an element.\nThe square brackets are very common in Ruby.\nThey are like sights used to line up a target. Exactly.\nThese brackets mean, \"I am looking for ____\" Ready, aim.\n\nLet's get all of our lotto numbers:\n\n    puts ticket[0]\n    puts ticket[1]\n    puts ticket[2]\n\nWhy do we use [0], [1], [2]?\n\nAnd not [1], [2] and [3]? Is that some kind of Japanese Zen thing?\nNo, we computer people just like to begin counting from zero. It's not just a Ruby thing,\nthis _zero based indexing_ is used in most programming languages.\n\n> A little reminder: you can use the __Copy__ button to copy the example code to the editor.","load_code":"ticket = [12, 47, 35]"},
"18":{"lang":"EN","title":"Summary #2 is Upon Us","chapter":"Y","answer":"\\w+","ok":"Does it rhyme?","error":"","text":"Now, look how your second minute went:\n\n### Errors\nIf you try to reverse a number or do anything fishy, Ruby will tell you so.\n\n### Arrays\nArrays are lists for storing things in some order.\nWe also know how to create arrays and get items from arrays.\n\n### Variables\nVariables save a thing and give it a name. You used the equals sign to do this. Like:\nticket = [14, 37, 18].\n\n### 2/8\nIn all there are eight sections. You are two-eighths of the way there! This is simple stuff,\ndon't you think? Good stuff up ahead.\n\nLet's change directions for a moment. I've stuffed a bit of poetry for you in a certain variable.\nTake a look. Type:\n\n    puts poem","load_code":"poem = \"My toast has flown from my hand\\nAnd my toast has gone to the moon.\\nBut when I saw it on television,\\nPlanting our flag on Halley's comet,\\nMore still did I want to eat it.\\n\""},
"19":{"lang":"EN","title":"Sadly, You Hate Toast Poetry","chapter":"N","answer":"(toast){0}","ok":"Excellent","error":"Still smells like toast to me","text":"Look, it's okay. You don't have to like it. Hack it up, be my guest. Instead of toast, go for a\nmelon or something. Try this to see the new poem:\n\n    poem.gsub(\"toast\", \"honeydew\")\n\nThe __gsub__ method is short for global substitute. It replaces all occurences of \"toast\" with\n\"honeydew\".","load_code":"prev"},
"20":{"lang":"EN","title":"Ready, Aim","chapter":"N","answer":"^\\n.ti tae ot (.+)","ok":"Okay, sure.  So the whole poem has been turned backwards.","error":"","text":"Here's a question: what happens when we reverse this whole poem? \n\n    poem.reverse","load_code":"prev"},
"21":{"lang":"EN","title":"Too Much Reversal","chapter":"N","answer":"^\\[\"More still did (.+)","ok":"Yes, almost what we want","error":"","text":"So the whole poem's been turned backwards, letter-by-letter. I really wanted to just reverse the lines though.\nMove the last line up to first and the first line down to last.\n\nBackwards, but not __that__ backwards.\n\nHere's how:\n\n    poem.lines.reverse","load_code":"prev"},
"22":{"lang":"EN","title":"Ringlets of Chained Methods","chapter":"N","answer":"^More still did (.+)","ok":"Good show, my friend!<br/>The join method took that array of lines and put them together into a string.","error":"","text":"So what do you see? What happened there? You typed __poem.lines.reverse__ and what happened?\n\nTwo things happened. You turned the poem into a list using lines.\nLines decides the way the string is split up and converts it into an Array.\n\nThen, you reversed that list. You had each line. You reversed them. That's it.\n\nLet's tack one more method on the end there:\n\n    puts poem.lines.reverse.join\n\nCombining methods like this is called _method chaining_.","load_code":"prev"},
"23":{"lang":"EN","title":"Of All the Summaries, #3 is Here Now","chapter":"Y","answer":"\\{\\}","ok":"You've made an empty hash!","error":"","text":"### Exclamations\nMethods may have exclamations (and also question marks) in their name.\nThese are just there to better explain what their function is. No big deal.\n\n### String manipulation\nSearch and change strings\n\n### Chaining\nChaining methods lets you get a lot more done. Break up a poem, reverse it, reassemble it:\n__poem.lines.reverse.join__\n\nAt this point, you may want to tinker with the poem a bit more. A complete list of all the String\nmethods is <a href=\"http://ruby-doc.org/core/classes/String.html\" target=\"_blank\">here</a>.\n\nGo ahead and try a few, such as: poem.downcase or poem.swapcase\n\n## Ready?\nWhen you feel ready to move on, type:\n\n    books = {}","load_code":"prev"},
"24":{"lang":"EN","title":"A Wee Blank Book","chapter":"N","answer":"^(splendid|quite_good|mediocre|quite_not_good|abysmal)$","ok":"Yes that's a new review","error":"Use one of splendid, quite_good, mediocre, quite_not_good, abysmal.<br/>Don't forget the colon","text":"You've made an empty __hash__. A hash is like an array, only every one of its elements has a name.\n\nWe're going to stuff some miniature book reviews in our new hash. Here's our rating system:\n\n- :splendid &rarr; a masterpiece\n- :quite\\_good &rarr; enjoyed, sure, yes\n- :mediocre &rarr; equal parts great and terrible\n- :quite\\_not\\_good &rarr; notably bad\n- :abysmal &rarr; steaming wreck\n\nTo rate a book, put the title in square brackets and put the rating after the equals. For example:\n\n    books[\"Gravitys Rainbow\"] = :splendid\n\n> By now I think it is only fair to tell you that all lessons in TryRuby are separate from each other.\n> So if you go crazy typing book reviews here, you can only use 'em in this lesson.  \n> If you want to use your reviews in the next lesson you should copy/paste them.  \n> Don't worry about this too much, each lesson has plenty of predefined stuff for you to play around with.","load_code":"books = {}"},
"25":{"lang":"EN","title":"More Bite-Size Reviews","chapter":"N","answer":"[3-9]","ok":"See, the length method works on strings, arrays and hashes.","error":"","text":"Keep going, fill it up with reviews. And, if you want to see the whole list, just type: __puts books__\n\nAgain, the ratings are: :splendid, :quite\\_good, :mediocre, :quite\\_not\\_good and :abysmal.\n\nThese ratings are not strings. When you place a colon in front of a simple word, you get a __symbol__.\nSymbols are cheaper than strings (in terms of computer memory.) If you use a word over and over in your program,\nuse a symbol. Rather than having thousands of copies of that word in memory, the computer will store the symbol only\n__once__.\n\nMore importantly, a symbol tells you that it is not just any old word but has a meaning within your program.\n\nEnter 2 more bookreviews, use __books.length__ to see how many reviews there are in the hash:\n\n    books[\"The deep end\"]  = :abysmal\n    books[\"Living colors\"] = :mediocre\n    \n    puts books\n    \n    puts books.length","load_code":"books = {\"Gravitys Rainbow\" => :splendid}"},
"26":{"lang":"EN","title":"Wait, Did I Like Gravity's Rainbow?","chapter":"N","answer":"^(splendid|quite_good|mediocre|quite_not_good|abysmal)$","ok":"I liked it a lot","error":"","text":"One great thing about Ruby is that names are often reused, which means fewer names you need to remember.\n\nRemember how we retrieved items from an array using a number:  \n__puts ticket[1]__.\n\nFor a hash this works the same way, except we don't use a number to get an element but a name.\n\nSo, if you'd like to look up one of your old reviews, again put the title in the square. But leave off the equals.\nJust like this:\n\n    puts books[\"Gravitys Rainbow\"]","load_code":"books = {\"Gravitys Rainbow\" => :splendid, \"The deep end\" => :abysmal, \"Living colors\" => :mediocre}"},
"27":{"lang":"EN","title":"Hashes as Pairs","chapter":"N","answer":"^\\[\".*\"\\]","ok":"You found the keys","error":"","text":"Keep in mind that hashes won't keep things in order. That's not their job. It'll just pair up\ntwo things: a __key__ and a __value__.\n\nIn your reviews, the book's title is the key and the rating is the value.\n\nIf you want to just see the titles of all the books you've reviewed:\n\n    books.keys\n\nYou can also try this with .values instead of .keys.","load_code":"prev"},
"28":{"lang":"EN","title":"Are You Harsh?","chapter":"N","answer":"\"mediocre\"","ok":"Great, wow! You've made a scorecard of your ratings","error":"","text":"So are you giving out harsh, unfair reviews? Let's keep score with a new hash __ratings__:\n\nThen, okay, now let's count up your reviews. Just stay with me. Type:\n\n    ratings = Hash.new {0}\n    \n    books.values.each { |rate|\n      ratings[rate] += 1\n    }\n    \n    puts ratings\n\nThe straight line in the code is the pipe character, probably located right above the Enter key\non your keyboard.\n\nThat _+= 1_ line means: increase the value by 1.\n\nDon't worry if you don't understand everything that is going on here. It will be revealed later.","load_code":"books = {\"Gravitys Rainbow\" => :splendid, \"The deep end\" => :abysmal, \"Living colors\" => :mediocre, \"Bumblebees\" => :mediocre}"},
"29":{"lang":"EN","title":"A Tally","chapter":"N","answer":"\\w+","ok":"Yodelay!","error":"","text":"One of the amazing new things we've just used is a __block__. We're going to explore these more\nin this and the next lesson. But, basically, a block is a bit of Ruby code surrounded by curly\nbraces.\n\nLet's try another block:\n\n    5.times { print \"Odelay! \" }\n\nBlocks are always attached to methods. Like the __times__ method, which takes the block and runs\nthe code over and over. (In our example: five times.)","load_code":""},
"30":{"lang":"EN","title":"Have you got the time?","chapter":"N","answer":"^[0-9]$","ok":"You timed it just right!","error":"Run the block 0 to 9 times","text":"As we saw in the first example with a block (when counting ratings) we can pass a value to the block. Which\nvalues are __passed__ is determined by the method that is running the block.\n\nThe values that are __received__ by the block are placed in the variable name at the beginning of the block,\nbetween two pipe symbols: |\n\nLet's try that with this block:\n\n    5.times { |time|\n      puts time\n    }\n\nHere, method __.times__ sends a value to variable __|time|__. But note that variable time is only known within the block.\n\n> Did you notice that you can split code over multiple lines. This makes it a bit easier to read.","load_code":""},
"31":{"lang":"EN","title":"Now Arriving at Summary #4","chapter":"Y","answer":"","ok":"","error":"","text":"This last lesson was a bit longer. You've probably used up three minutes learning about:\n\n### Hashes\nThe little dictionary with the curly pages: __{}__\n\n### Symbols\nTiny, efficient code words with a colon, like: __:splendid__\n\n### Blocks\nChunks of code which can be tacked on to many of Ruby's methods. Here's the code you used to\nbuild a scorecard:  \n__books.values.each { |rate| ratings[rate] += 1 }__\n\n### Next\nIn the next lesson we will delve a little bit deeper into methods.","load_code":""},
"32":{"lang":"EN","title":"To (be) or not to (be)","chapter":"N","answer":"","ok":"","error":"","text":"One other little thing we haven't really talked about openly: method arguments.\nRemember when we changed the poem a little bit? We used:\n__poem.gsub(\"toast\", \"honeydew\")__\n\nThe gsub method needs 2 arguments, which we passed to gsub by including two strings between\nparentheses. _Arguments tell the method exactly what to do._\n\n### Parentheses\nActually, most of the time Ruby doesn't mind if you omit the parentheses. So this would have\nworked too:\n__poem.gsub \"toast\", \"honeydew\"__\n\nWe have already used another method with a parameter. Many times in fact, though it was not very\nobvious:\n\n    puts \"Hello\"\n    puts(\"Hello\")\n\nYes __puts__ is also a method. Using puts with or without parentheses is the same to Ruby, but the\nversion without parentheses is a bit easier to read. And it saves you valuable typing time!\n\n> So I guess the conclusion is that you can do whatever you like with parentheses as long as your\n> code reads nicely.\n\n### to (be) or not to (be)\nSo if _to_ is a method and _be_ is an argument we now know the answer to this age old question.\nIt is really just a matter of preference whether you want _to be_ or _to(be)_.\n\nAre you in the mood for more Shakespeare? Read on.","load_code":"poem = \"My toast has flown from my hand\\nAnd my toast has gone to the moon.\\nYada yada yada\\n\""},
"33":{"lang":"EN","title":"The Taming of the Shrew","chapter":"N","answer":"^tame","ok":"Good good!","error":"","text":"You totally know how to use Ruby now. I mean you've got down the essentials.\nYou just need to keep learning more methods and try out more complex blocks.\n\nBut there's one side of Ruby we haven't settled. Making your own methods.\n__Ahem!__ Let's get it over with then.\n\nNext to using Ruby's built in methods (like puts, sort, times) you can define\nyour own methods. Why is that a good idea? Two reasons:\n\n### To make your program shorter\nIf you have to do the same thing in more than one part of your code it is easier\nto put that code in a separate method. Your code will be shorter.\n\n### To make your code easier to read\nSuppose your program needs to do a lot of different things.\nYou __could__ stuff all code into one long piece. But it would be very difficult to\nread and understand that code later.\n\nInstead you should cut up your code in different methods and give each method an easy to\nunderstand English name. You will thank yourself later.\n\nSo how do we define a method? Like this:\n\n    def tame( number_of_shrews )\n    end","load_code":""},
"34":{"lang":"EN","title":"In Ruby, Def Leppard means: define method Leppard","chapter":"N","answer":"^tame","ok":"Tame is not lame","error":"","text":"Hey, okay, you done it. You're making your own method. You started with def, followed by the name of the method.\nAnd a list of arguments which the method will need. This isn't too scary and dangerous!\nAll we have to do is fill it up with Ruby and finish it up with end.\n\nHere's the code:\n    \n    def tame( number_of_shrews )\n      number_of_shrews.times {\n        puts \"Tamed a shrew\"\n      }\n    end\n    \n> __P.S.__  \n> If you don't get the title of this chapter.\n> <a href=\"http://en.wikipedia.org/wiki/Def_Leppard\" target=\"_blank\">Def Leppard</a>\n> is the name of a, once famous, English rock band.","load_code":""},
"35":{"lang":"EN","title":"The Ripened Fruit of Your Own Creation","chapter":"N","answer":"^Tamed a shrew","ok":"That'll show those shrews","error":"","text":"A new method is born. Let us use it now: \n\n    tame 5","load_code":"def tame(number_of_shrews);number_of_shrews.times{puts \"Tamed a shrew\"};end;"},
"36":{"lang":"EN","title":"Give and take","chapter":"N","answer":"\\d+","ok":"Right on. Bravo.","error":"","text":"Most methods do not only want some parameters as input, but will also __give something back__.\nI have changed our method a bit so it will return a value to you. Try it:\n\n    def tame( number_of_shrews )\n      number_of_shrews.times {\n        puts \"Tamed a shrew\"\n      }\n      return number_of_shrews\n    end\n\n    puts tame(3)\n\n### Return\nAnd, since you're getting so advanced and capable here, one other tip:\nyou can omit the word __return__ from the last line of the method.\nRuby will automagically return the last value that was used inside the method.\n\nSo we can change the last line to just: __number\\_of\\_shrews__.\n\nBut since method __.times__ also returns the _number\\_of\\_shrews_ we can\nremove the entire last line. So in fact our original method already did what we wanted all along!","load_code":""},
"37":{"lang":"EN","title":"Hello, Who's There? And Summary #5 Waves Its Hat!","chapter":"Y","answer":"","ok":"","error":"","text":"Well done, well done, well done, well done!\n\nTruly, truly, truly, truly, truuuuuuuuly!\n\nHere's the last few minutes of your life in review:\n\n### Methods\nMethods can be defined with __def__ and have a name. Methods make your program shorter\nand easier to read.\n\n### Parameters\nMethods can have parameters.\n\n### Return values\nMethods (almost) always return a value.\n\n## Now\nTo (be) or not to (be) is not a question to you anymore. Are you ready for some more Shakespeare?","load_code":""},
"38":{"lang":"EN","title":"The world is our oyster","chapter":"N","answer":"^\\{\\\"William","ok":"Good. Bit difficult to read.","error":"","text":"So far we have been running programs that only use things that we have typed ourselves.\nWhich is nice, I mean that _Odelaying_ was epic, but this is the internet era so it is about\ntime we included the rest of the world in our programming efforts.\n\nMany, many, many websites are available that you can ask for information. For instance\nthis link will give you all current <a href=\"http://news.google.com/news/section?q=ruby&output=rss\" target=\"_blank\">Google news feeds</a>\nabout Ruby.\n\nYour web browser will probably display it quite nicely for you. If you look at the source\n(type: control-U) you will see a long string of strangely formatted text. In the Google example\nit is in the __rss__ format.\n\n### Formats\nThere are many other formats, with strange names, available and used on the web, like:\nhtml, xml and json. Yes, even this very website uses a couple of these.\n\nI have prepared a method for you that will fetch a list of the complete works of William\nShakespeare from the internet.\n(Don't worry it actually comes from the same server that this website runs on, so\nwe're not bothering anyone.)\n\nGet the data with:\n\n    get_shakey","load_code":"def get_shakey;JSON.parse(\"{\\\"William Shakespeare\\\": {\\\"1\\\": {\\\"title\\\": \\\"The Two Gentlemen of Verona\\\", \\\"finished\\\": 1591},\\\"2\\\": {\\\"title\\\": \\\"The Taming of the Shrew\\\", \\\"finished\\\": 1591},\\\"3\\\": {\\\"title\\\": \\\"Henry VI, Part 2\\\", \\\"finished\\\": 1591},\\\"4\\\": {\\\"title\\\": \\\"Henry VI, Part 3\\\", \\\"finished\\\": 1591},\\\"5\\\": {\\\"title\\\": \\\"Henry VI, Part 1\\\", \\\"finished\\\": 1592},\\\"6\\\": {\\\"title\\\": \\\"Titus Andronicus\\\", \\\"finished\\\": 1592},\\\"7\\\": {\\\"title\\\": \\\"Richard III\\\", \\\"finished\\\": 1593},\\\"8\\\": {\\\"title\\\": \\\"Edward III\\\", \\\"finished\\\": 1593},\\\"9\\\": {\\\"title\\\": \\\"The Comedy of Errors\\\", \\\"finished\\\": 1594},\\\"10\\\": {\\\"title\\\": \\\"Love's Labour's Lost\\\", \\\"finished\\\": 1595},\\\"11\\\": {\\\"title\\\": \\\"Love's Labour's Won\\\", \\\"finished\\\": 1596},\\\"12\\\": {\\\"title\\\": \\\"Richard II\\\", \\\"finished\\\": 1595},\\\"13\\\": {\\\"title\\\": \\\"Romeo and Juliet\\\", \\\"finished\\\": 1595},\\\"14\\\": {\\\"title\\\": \\\"A Midsummer Night's Dream\\\", \\\"finished\\\": 1595},\\\"15\\\": {\\\"title\\\": \\\"King John\\\", \\\"finished\\\": 1596},\\\"16\\\": {\\\"title\\\": \\\"The Merchant of Venice\\\", \\\"finished\\\": 1597},\\\"17\\\": {\\\"title\\\": \\\"Henry IV, Part 1\\\", \\\"finished\\\": 1597},\\\"18\\\": {\\\"title\\\": \\\"The Merry Wives of Windsor\\\", \\\"finished\\\": 1597},\\\"19\\\": {\\\"title\\\": \\\"Henry IV, Part 2\\\", \\\"finished\\\": 1598},\\\"20\\\": {\\\"title\\\": \\\"Much Ado About Nothing\\\", \\\"finished\\\": 1599},\\\"21\\\": {\\\"title\\\": \\\"Henry V\\\", \\\"finished\\\": 1599},\\\"22\\\": {\\\"title\\\": \\\"Julius Caesar\\\", \\\"finished\\\": 1599},\\\"23\\\": {\\\"title\\\": \\\"As You Like It\\\", \\\"finished\\\": 1600},\\\"24\\\": {\\\"title\\\": \\\"Hamlet\\\", \\\"finished\\\": 1601},\\\"25\\\": {\\\"title\\\": \\\"Twelfth Night\\\", \\\"finished\\\": 1601},\\\"26\\\": {\\\"title\\\": \\\"Troilus and Cressida\\\", \\\"finished\\\": 1602},\\\"27\\\": {\\\"title\\\": \\\"Sir Thomas More\\\", \\\"finished\\\": 1604},\\\"28\\\": {\\\"title\\\": \\\"Measure for Measure\\\", \\\"finished\\\": 1604},\\\"29\\\": {\\\"title\\\": \\\"Othello\\\", \\\"finished\\\": 1604},\\\"30\\\": {\\\"title\\\": \\\"All's Well That Ends Well\\\", \\\"finished\\\": 1605},\\\"31\\\": {\\\"title\\\": \\\"King Lear\\\", \\\"finished\\\": 1606},\\\"32\\\": {\\\"title\\\": \\\"Timon of Athens\\\", \\\"finished\\\": 1606},\\\"33\\\": {\\\"title\\\": \\\"Macbeth\\\", \\\"finished\\\": 1606},\\\"34\\\": {\\\"title\\\": \\\"Antony and Cleopatra\\\", \\\"finished\\\": 1606},\\\"35\\\": {\\\"title\\\": \\\"Pericles, Prince of Tyre\\\", \\\"finished\\\": 1608},\\\"36\\\": {\\\"title\\\": \\\"Coriolanus\\\", \\\"finished\\\": 1608},\\\"37\\\": {\\\"title\\\": \\\"The Winter's Tale\\\", \\\"finished\\\": 1611},\\\"38\\\": {\\\"title\\\": \\\"Cymbeline\\\", \\\"finished\\\": 1610},\\\"39\\\": {\\\"title\\\": \\\"The Tempest\\\", \\\"finished\\\": 1611},\\\"40\\\": {\\\"title\\\": \\\"Cardenio\\\", \\\"finished\\\": 1613},\\\"41\\\": {\\\"title\\\": \\\"Henry VIII\\\", \\\"finished\\\": 1613},\\\"42\\\": {\\\"title\\\": \\\"The Two Noble Kinsmen\\\", \\\"finished\\\": 1614}}}\");end;"},
"39":{"lang":"EN","title":"Noble Kinsmen","chapter":"N","answer":"^The Two Noble Kinsmen$","ok":"That's much better","error":"","text":"Okay we now have a list of plays from the internet. The list was in the json format.\nFortunately for us Ruby kindly provides a method to convert json data to a Ruby hash.\nThe _get\\_shakey_ method already did that for us.\n\nBut since the structure of the json data is retained in the hash, it is still a bit difficult to read.\nLet us write a method to display the plays nicely.\n\nIf you inspect the list of plays carefully you will see that it has a kind of nested\nstructure. (This is actually quite common in data you get from the internet.)\nLooks like this:\n\n<ul>\n  <li>\"William Shakespeare\"\n  <ul>\n      <li>\"1\"\n      <ul>\n        <li>\"title\": \"The Two Gentlemen of Verona\"</li>\n        <li>\"finished\": 1591</li>\n      </ul>\n      </li>\n      <li>\"2\"\n      <ul>\n        <li>\"title\": \"The Taming of the Shrew\"</li>\n        <li>\"finished\": 1591</li>\n      </ul>\n      </li>\n      <li>...</li>\n  </ul>\n  </li>\n</ul>\n\nTo list the plays we first have to access the top \"William Shakespeare\" hash element by its name.\nNext we have to __iterate__ through each element below it.\n\nRuby has a method for iterating. It is called __each__. We have seen it before when\ncreating our book rating system.\n\nEverything that method __each__ returns is passed to a block:\n\n    s = get_shakey\n    \n    s[\"William Shakespeare\"].each { |key, val|\n      puts val[\"title\"]\n    }","load_code":"prev"},
"40":{"lang":"EN","title":"All together now","chapter":"N","answer":"^4$","ok":"Yes, Shakespeare wrote 4 plays in 1591","error":"Answer for the year 1591 should be 4","text":"Now suppose we only want to know the names and number of plays written by Shakespeare\nin a certain year.\n\nRuby lets us __select__ values from a hash. The select method uses a block to let us\ndefine what to select and returns what it found.\n\nWe can then use the results returned by __select__ in the __each__ method as before by\nsimply adding it after the select block. This is another example of method chaining, which we saw\nearlier when reversing a poem.\n\nI have prepared the __count\\_plays__ method for you. See if you can find out how many plays\nwere written by Shakespeare in the year __1591__. Try this:\n\n    def count_plays(year)\n      s = get_shakey\n      \n      s[\"William Shakespeare\"]\n        .select { |k, v|\n          v[\"finished\"] == year\n        }.each { |key, val|\n          puts val[\"title\"]\n        }.count\n    end\n    \n    puts count_plays(0)\n\nDid you notice that I chained the count method at the end of the each method. This gives\nus a return value for the __count\\_plays__ method.\n\nThere is another possibility for chaining here. See that lonely line __s = get_shakey__.\nYou could add the __[\"William Shakespeare\"].select { |k, v|__ at the end of get_shakey\n(no dot needed in this case).","load_code":"prev"},
"41":{"lang":"EN","title":"All's Well That Ends Well","chapter":"N","answer":"All's Well That Ends Well","ok":"True","error":"Use 1605 as the second parameter","text":"Okay, we got some data from the internet, we selected what we wanted and printed it out.\nWhat is left to improve? We could print the results a bit prettier. Like add the year\nand align titles and years.\n\nThis means printing several values on one line. Ruby has a neat way of doing\nthat. It is just like printing a string like: __puts \"Hi, my name is Jimmy\"__.\nBut instead of the literal value _Jimmy_ we use the value of a variable.\n\nFirst replace __Jimmy__ with __#{}__. If Ruby sees a hash symbol # followed by a curly brace {\nit looks for a variable between the first brace and the following closing brace }.\nSo we can use this: __\"Hi, my name is \\#{name}\"__.\n\nLet's change our code a bit\n\n    def print_plays(year_from, year_to)\n      get_shakey[\"William Shakespeare\"]\n        .select { |k, v|\n          year_from <= v[\"finished\"] &&\n          year_to   >= v[\"finished\"]\n        }.each { |k, v|\n          puts \"#{v[\"title\"].ljust(30)} #{v[\"finished\"]}\"\n        }\n    end\n    print_plays(1600, 1605)\n\nI have added __.ljust(30)__ to the title. This way the title is _left justified_ with a minimum\nlength of 30 characters so the years align nicely.\n\nSee if you can change the ouput of the program so that it shows the plays like this: __1600 -> As You Like It__\n\n__All's Well That Ends Well?__ Hey we're not done yet, but the end is in sight!","load_code":"prev"},
"42":{"lang":"EN","title":"If only I knew how to make a decision","chapter":"N","answer":"","ok":"","error":"","text":"Decision making, in real life this can be a real problem. Not for us though.\nRuby makes it very easy to make decisions.\n\n    if 1 < 2\n      puts \"It is true: 1 is less than 2\"\n    end\n\nThe key word here is __if__. If can be placed before a method or after a method, like so:\n\n    puts \"It is true: 1 is less than 2\" if 1 < 2\n\n__If__ is a method that requires one parameter. That parameter can be any expression that you\nwant to test. The outcome of the expression must be either __true__ or __false__.\nHere are a couple of expressions with their outcomes:\n\n    5     <= 10     # => true\n    'abc' == 'def'  # => false\n    true            # => true\n    123456          # => true\n    0               # => true\n    nil             # => false\n    'xyz'.empty?    # => false\n    'a' > 5         # => error:\n                    # comparison of String with\n                    # Numeric failed\n\nThe _if expression_ can take many forms. It can compare literal values (1 < 2),\nvariables (a < 1) and the return value of a method ('xyz'.empty?).","load_code":""},
"43":{"lang":"EN","title":"And Now For the Startling Conclusion","chapter":"N","answer":"is not equal to 100$","ok":"That's better","error":"This can't be right","text":"Did you see the 2 equal signs in __'abc' == 'def'__?\n\nThis __==__ means __is equal to__.\nThe single equal sign that we have seen before means __assign a value to a variable__.\n\nTo make it more confusing: you can use the assignment after an if method like this:\n\n    a = 0\n    \n    if a = 100\n      puts \"Expression is true, but a is now: #{a}\"\n    else\n      puts \"#{a} is not equal to 100\"\n    end\n\nChange the = into == and see what happens.\n\nI can guarantee you that you will forget typing the second equal sign regularly. I also\nstill forget it sometimes.\n\n### else\nIn the code above I have added an else expression. This part will be executed when the\n__if test-expression__ evaluates to false.\n\n> There are more variations to this if-then-else theme. You can read more\n> <a href=\"http://www.ruby-doc.org/core/doc/syntax/control_expressions_rdoc.html\" target=\"_blank\">here</a>.","load_code":""},
"44":{"lang":"EN","title":"Me hungry","chapter":"N","answer":"^Me not hungry","ok":"Yes","error":"No way am I hungry at 10 AM!","text":"Okay, this is coming along wonderfully. This is simple stuff for you, but keep in mind that you\ndidn't know __any Ruby whatsoever__ just fifteen minutes ago!\n\nLast step. Let's tie it all together, you know? Let's make it chime together like a very nice set\nof glistening chimes on the beach in the maginificent sunlight!\n\nWe'll define two methods first and then take a decision:\n\n    def hungry?(time_of_day_in_hours)\n      puts \"Me hungry\"\n      true\n    end\n\n    def eat_an(what)\n      puts \"Me eat #{what}\\n\"\n    end\n\n    eat_an 'apple' if hungry?(14)\n\n    eat_an 'apple' if hungry?(10)\n\nNow see if you can change the method __hungry?__ to display __\"Me not hungry\"__ and returning false\nwhen the time is less than 12.","load_code":""},
"45":{"lang":"EN","title":"Summary #6 Which Means You've Come So Far","chapter":"Y","answer":"\\{\\}","ok":"Ok, that's an empty hash","error":"","text":"You're a level six Ruby cleric. I mean what a great job you've done. Let's review:\n\n\n### Data\nYou loaded some data off the internet, traversed a data structure and selected values.\n\n### Iterating\nYou iterated all elements of a hash and you chained some more methods.\n\n### Pretty printing\nAnd if that wasn't enough, you formatted and printed some values in a way that is easy\nto read for humans. In fact __you made a real program!__\n\n### IF\nYou learned to take control of your programs with __if__ and __else__ statements.\n\n## So\nWhat could possibly be next? What could you possibly have to learn now?\nHa, this is the best part. You've come such a long way that we're going\nto uncover classes. For two more short lessons and you're done.\n\nEarlier, we created a hash like this:\n\n    Hash.new","load_code":""},
"46":{"lang":"EN","title":"Not a School Class, a Working Class","chapter":"N","answer":"","ok":"","error":"","text":"You see, the empty curly braces {} is a shortcut for Hash.new. The new method is used to make objects\nof a certain class. Think \"class\" as in \"working class\" &mdash; a specific group of objects which\nare similar, have the same jobs, the same shirts.\nWhat use is a class?\n\n### Blurbalizer<sup>TM</sup>\nYou just had a brilliant idea for a new app. It is going to be __the__ next instant\nmessaging platform. You want an app where people can send each other short messages. You call\nthese messages Blurbs<sup>TM</sup>. A Blurb<sup>TM</sup> has a maximum length of just 40 characters. Let's do a mood setting too.\n\n<!---The Internet has really brought back stick people and smileys out of bankruptcy. __Emote!__-->\n\n### Where to start\nWell, you might store your Blurbs<sup>TM</sup> entries in a json file, right?\nBut how would you keep track of the content of the entry and the time it was posted?\nAnd when you loaded the file, how would it look in Ruby?\nWould it be a Hash? Or an Array? Or an Array of Arrays? Or something else?\n\n### Class\nI really think you'll want to use a class. You are already familiar with many classes:\nHash, Array, String.\nLet's make a new class (returns no output):\n\n    class Blurb\n    end","load_code":""},
"47":{"lang":"EN","title":"The Stuff Apps are Made of","chapter":"N","answer":"","ok":"","error":"","text":"You've opened up a new Blurb<sup>TM</sup> class. What is your blog entry made of?\nThe content, sure. Also, a time when the Blurb<sup>TM</sup> was posted. And a mood.\n\nOkay, so you've got the first line of the class, here's the rest:\n\n    class Blurb\n      attr_accessor :content, :time, :mood\n    end\n\nClass names always begin with a capital letter.\n\n(Still no output)","load_code":""},
"48":{"lang":"EN","title":"Accessors Are the Dangling Limbs","chapter":"N","answer":"Blurb:","ok":"My first Blurb","error":"","text":"Hey, good class, man. You've got a new Blurb<sup>TM</sup> class.\n\nIn the class definition, you used a method called attr\\_accessor.\nThere are many __attr__ibute methods like this which add little settings to classes.\nThese attributes are just variables attached to a class.\n\nThink of it this way. A class is like a person. That star-shaped human thing out there.\nAnd the attributes are the dangling limbs, the different parts that make up a body and\nother people can shake hands with.\n\n### Now\nTo create a Blurb<sup>TM</sup> and set the content:\n\n    blurb1 = Blurb.new\n    puts blurb1\n    blurb1.content = \"Today Mount Hood Was Stolen!\"","load_code":"class Blurb;attr_accessor :content,:time,:mood;end"},
"49":{"lang":"EN","title":"An Object, That Neat Little Package","chapter":"N","answer":"Blurb:","ok":"Blurb updated","error":"","text":"Go ahead and set the Blurb<sup>TM</sup> time and mood:\n\n    blurb1.time = Time.now\n    blurb1.mood = :sick\n    \n    puts blurb1","load_code":"prev;blurb1=Blurb.new;blurb1.content=\"Today Mount Hood Was Stolen!\""},
"50":{"lang":"EN","title":"Quickening it Up","chapter":"N","answer":"^\\d{4}","ok":"Noted","error":"","text":"Cool, your app is awesome. Hey, let's make things a bit easier on you.\nYou're not going to want to set the time like that every time you Blurb<sup>TM</sup>.\n\nYou just want to type the content and set the mood, right?\n\nLet's add an __initialize__ method to our class. This method is called whenever a new Blurb<sup>TM</sup>\nis created.\nAt the same time we can limit the length of the Blurb<sup>TM</sup> content to 40 characters.\n\n    class Blurb\n      attr_accessor :content, :time, :mood\n\n      def initialize(mood, content=\"\")\n        @time    = Time.now\n        @content = content[0..39]\n        @mood    = mood\n      end\n    end\n    \n    Blurb.new.time\n\n(That parameter __content=\"\"__ is there to make sure that we know content is a string,\neven if no content parameter is passed to the initialize method.)","load_code":""},
"51":{"lang":"EN","title":"You've Taught Your App to Reject Worthless Things","chapter":"N","answer":"Blurb:","ok":"Blurb added","error":"","text":"Did you see how inside the class we used the at-symbols (@time).\n\n__Outside__ the class, we use accessors:\n\n> __blurb.time = Time.now__\n\nbut __inside__ we use the __object's variables__:\n\n> __@time = Time.now__\n\nThey're the exact same thing, but expressed in two different places of your program.\n\n### Create another Blurb<sup>TM</sup>\nWhen a new Blurb<sup>TM</sup> is created, the initialize method is used to check for any\narguments to new.\n\nUh, we need two arguments:\n\n    Blurb2 = Blurb.new :confused, \"I can not believe Mt. Hood was stolen!\"","load_code":"class Blurb;attr_accessor :content,:time,:mood;def initialize(mood, content=\"\");@time=Time.now;@content=content[0..39];@mood=mood;end;end;blurb1=Blurb.new(:sick,\"Today Mount Hood Was Stolen!\")"},
"52":{"lang":"EN","title":"A Giraffe Has Not Stolen Summary #7","chapter":"Y","answer":"","ok":"","error":"","text":"Aha, you're here. And all in one piece. We're still going to make your app real,\nbut until then, let's review, okay?\n\n### Classes\nEverything in Ruby is some kind of object. Classes explain objects, how a certain object works.\nFor example, you made a few Blurb<sup>TM</sup> objects and these objects are explained in the Blurb\nclass.\nIn other words: you call them Blurb objects.\nYou can use classes to (kinda) model real life objects.\n\n### Accessors\nAccessors are variables attached to an object which can be used __outside__ the object.\n(blurb2.time = Time.now)\n\n### Object variables\nObject variables are the same variables you're using for accessors, but __inside__ the object.\n(@time = Time.now)","load_code":"prev;blurb2=Blurb.new :confused, \"I can not believe Mt. Hood was stolen!\""},
"53":{"lang":"EN","title":"Your Own Turf","chapter":"N","answer":"Blurbalizer:","ok":"My app created","error":"","text":"Okay, let's wrap things up, kid. Here's the last chapter of the GRIPPING epic story of Try Ruby!\nNow that you've got a taste of how it all works, how are you going to use it around the house\nand in your grocer's freezer?\nYou're a great person (one of my favorites), but you need guidance.\n\n### Let's finish your app\nYou have app entries, but no actual app.\nIt still needs a title, someplace to store all Blurbs<sup>TM</sup> and a timeline in order to work.\n\nGuess what, we're going to use another class. I've given all the code for the new class in one go.\nJust __take your time__ to study it.  \nI'm in no hurry, I'll wait for you in the next lesson.\n\n    class Blurbalizer\n      def initialize(title)\n        @title  = title\n        @blurbs = [] # A fresh clean array\n                     # for storing Blurbs\n      end\n      \n      def add_a_blurb(mood, content)\n        # The << means add to the end of the array\n        @blurbs << Blurb.new(mood, content)\n      end\n      \n      def show_timeline\n        puts \"Blurbify: #{@title} has #{@blurbs.count} Blurbs\"\n        \n        @blurbs.sort_by { |t|\n          t.time\n        }.reverse.each { |t|\n          puts \"#{t.content.ljust(40)} #{t.time}\"\n        }\n      end\n    end\n    \n    myapp = Blurbalizer.new \"The Big Blurb\"","load_code":"class Blurb;attr_accessor :content,:time,:mood;def initialize(mood, content=\"\");@time=Time.now;@content=content[0..39];@mood=mood;end;end"},
"54":{"lang":"EN","title":"What's that Blurb all about?","chapter":"N","answer":"Today","ok":"Bring on the blurbs","error":"","text":"There you are. Did you figure out what all that code in the Blurbalizer<sup>TM</sup> class does?\n\n> In the Blurbalizer<sup>TM</sup> class are two __methods__ (add\\_a\\_blurb and show\\_timeline).\n> You can use a method outside the class, just like we did with accessors.\n\nTime to start using Blurbalizer<sup>TM</sup>. I've already loaded some Blurbs<sup>TM</sup> for you,\nbut feel free to add your own.\n\nWe're no longer creating Blurbs<sup>TM</sup> directly, but we use the add\\_a\\_blurb __method__ of the\nBlurbalizer<sup>TM</sup> class. This way we can be sure all our Blurbs<sup>TM</sup> are stored in the\nmyapp object.\n\n    myapp.add_a_blurb :moody, \"Add Blurb here\"\n\n    myapp.show_timeline","load_code":"prev;class Blurbalizer;attr_reader :title;def initialize(title);@title=title;@blurbs=[];end;def add_a_blurb(mood, content);@blurbs << Blurb.new(mood, content);@blurbs.each {|t| t.time -= 73};end;def show_timeline;puts \"Blurbalizer: #{@title} has #{@blurbs.count} Blurbs\\n\";@blurbs.sort_by { |t| t.time}.reverse.each { |t| puts \"#{t.content.ljust(40)} #{t.time}\"};end;end;myapp = Blurbalizer.new \"The Big Blurb\";myapp.add_a_blurb :sick,\"Today Mount Hood Was Stolen!\";myapp.add_a_blurb :confused,\"I can not believe Mt. Hood was stolen!\";myapp.add_a_blurb :dazed,\"I am speechless!\";myapp.add_a_blurb :mad,\"It was stolen by a giraffe !!\";myapp.add_a_blurb :sad,\"I Left my Hoodie on the Mountain!\";myapp.add_a_blurb :mad,\"I am never going back to that mountain.\""},
"55":{"lang":"EN","title":"It's All About Combining","chapter":"N","answer":":-","ok":"Moody!","error":"","text":"Some beautiful things can be done with the simple parts of Ruby, especially when you combine them\ntogether into new things.\nHere we've got an app made of a class containing another class. And, actually, Ruby really does good\nwith this kind of creature. It is called object oriented programming.\n\nWe have arrived at the __last programming excercise__ of TryRuby. If you want, you can add some\nmore features to Blurbalizer<sup>TM</sup>.\n\nMaybe you want to print the mood as a smiley in the __show_timeline__ method. You could add\na _moodify_ method to the Blurb<sup>TM</sup> class and then use that method in the _show\\_timeline_ method:\n\n    class Blurb\n      attr_accessor :content, :time, :mood\n\n      def initialize(mood, content=\"\")\n        @time    = Time.now\n        @content = content[0..39]\n        @mood    = mood\n      end\n\n      def moodify\n        if    @mood == :sad\n          return \":-(\"\n        elsif @mood == :happy\n          return \":-)\"\n        # Add other moods here\n        end\n\n        # The default mood\n        \":-|\"\n      end\n    end\n\n    class Blurbalizer\n      def initialize(title)\n        @title  = title\n        @blurbs = []\n      end\n\n      def add_a_blurb(mood, content)\n        @blurbs << Blurb.new(mood, content)\n      end\n\n      def show_timeline\n        puts \"Blurbalizer: #{@title} has #{@blurbs.count} Blurbs\"\n\n        @blurbs.sort_by { |t|\n          t.time\n        }.reverse.each { |t|\n          puts \"#{t.content.ljust(40)} #{t.time}\"\n        }\n      end\n    end\n\n    myapp.show_timeline","load_code":"prev"},
"56":{"lang":"EN","title":"Summary #8, The Hey-Relax-You-Did-Good Summary","chapter":"Y","answer":"","ok":"","error":"","text":"This last section took a moment to wind down, to give you some pointers as to how you can use Ruby.\n\nIf you enjoyed yourself, you can continue with the <a href=\"/playground\">TryRuby Playground</a>\nor download and install Ruby:\n<a href=\"https://www.ruby-lang.org/en/downloads/\" target=\"_blank\">ruby-lang.org</a>\n\nOnce you have Ruby installed, you can create a file, let say _my\\_first\\_program.rb_, with a text\neditor, type some Ruby code and then run it by opening a command prompt and typing:\n\n    ruby my_first_program.rb\n\nThere are many (free) development tools available that combine an editor, file browser and a\n'ruby-runner'.\n\n## Celebrate\nYou really deserve a double-layer cake with double-double frosting and a guy playing one of those guitars that's a double guitar.\nI mean you finished, you really did! No doubt about it, you're a __certified red-blooded smartiac!__\n\n## More info\nThere are a couple of articles on this website. They can give you some pointers on where to\ngo from here.","load_code":"def ruby(f);puts \"Go to www.ruby-lang.org to download Ruby\";end;class K;attr_reader :rb;end;my_first_program=K.new"}}